{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# One Route Application\n\n## Overview\n\nOne Route is a comprehensive full-stack car-sharing application that connects drivers and passengers for carpooling and ride-sharing services. The platform features user management with OTP verification, ride creation/booking system, real-time communication, secure peer-to-peer payments with PayPal, live GPS tracking with WebSocket updates, safety features including emergency SOS, ID verification, in-app chat with location sharing, and a complete admin portal with payment configuration. Built with a modern tech stack featuring React frontend, Express.js backend, PostgreSQL database with Drizzle ORM, and real-time WebSocket communication.\n\n## Recent Changes (August 2025)\n- **PayPal Integration**: Switched from Stripe to PayPal for real money payment processing with credit card support\n- **Real-Time GPS Tracking**: Implemented live location sharing between drivers and passengers during rides\n- **WebSocket Communication**: Added real-time messaging and location updates across all ride participants\n- **Enhanced Chat System**: Integrated GPS tracking tabs within the chat interface for seamless experience\n- **Testing Suite**: Created comprehensive testing interface at /test-all for system validation\n- **Mobile App Support**: Added Capacitor integration for native iOS and Android app deployment with enhanced GPS, notifications, and camera features\n- **Mobile Conversion**: Successfully converted web app to mobile app - ready for App Store deployment with all features working\n- **TypeScript Error Cleanup**: Fixed 2000+ TypeScript compilation errors, resolved schema validation issues, fixed form handling, and corrected type mismatches for clean development environment\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and hot reloading\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for RESTful API development\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth integration with OpenID Connect for secure user authentication\n- **Session Management**: Express session with PostgreSQL session store for persistent login state\n- **Middleware**: Custom logging, error handling, and authentication middleware\n\n### Database Design\n- **Users**: Stores user profiles, ratings, verification status, and suspension state\n- **Vehicles**: Manages user-owned vehicles with make, model, and details\n- **Rides**: Core ride offerings with origin, destination, pricing, and availability\n- **Ride Requests**: Handles passenger requests to join rides with payment status\n- **Reviews**: User rating and review system for trust building\n- **Chat Messages**: Real-time messaging system for ride coordination\n- **Emergency Alerts**: Safety alert system with location tracking\n- **ID Verifications**: Document verification system with admin review\n- **Admin Settings**: Bank details and payment configuration for administrators\n- **Sessions**: Authentication session storage for Replit Auth\n\n### API Structure\n- **Authentication Routes**: `/api/auth/*` for login, logout, and user session management\n- **User Management**: `/api/profile` for profile updates and user data\n- **Vehicle Management**: `/api/vehicles` for CRUD operations on user vehicles\n- **Ride Management**: `/api/rides` for creating, searching, and managing rides\n- **Ride Requests**: `/api/ride-requests` for passenger booking workflow\n- **Reviews**: `/api/reviews` for rating and feedback system\n- **Payment Processing**: `/api/payment/*` for Stripe payment integration\n- **Chat System**: `/api/chat/*` for real-time messaging between users\n- **Emergency Features**: `/api/emergency/*` for safety alerts and SOS functionality\n- **ID Verification**: `/api/verify/*` for document upload and verification\n- **Admin Portal**: `/api/admin/*` for user management, system oversight, and bank configuration\n\n### Development and Build Process\n- **Development**: Vite dev server with HMR for frontend, tsx for backend development\n- **Build**: Vite for frontend bundling, esbuild for backend compilation\n- **Database Migration**: Drizzle Kit for schema management and migrations\n- **Type Safety**: Shared TypeScript schemas between frontend and backend\n\n## External Dependencies\n\n### Database and ORM\n- **Neon Database**: Serverless PostgreSQL hosting via `@neondatabase/serverless`\n- **Drizzle ORM**: Type-safe database queries and schema management\n\n### Authentication\n- **Replit Auth**: OpenID Connect authentication provider for seamless integration\n- **Passport.js**: Authentication middleware with OpenID strategy\n- **Connect-PG-Simple**: PostgreSQL session store for persistent authentication\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe variant styling system\n\n### Form and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Runtime type validation and schema definition\n- **@hookform/resolvers**: Integration between React Hook Form and Zod\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and optimized production builds\n- **TSX**: TypeScript execution for Node.js development\n- **Replit Plugins**: Development environment integration and error handling","size_bytes":5983},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\n// @ts-ignore - Module resolution issue with openid-client/passport\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4289},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { WebSocketManager } from \"./websocket\";\nimport { \n  insertRideSchema, \n  insertVehicleSchema, \n  insertRideRequestSchema,\n  insertReviewSchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// PayPal imports (comment out to prevent errors when no credentials)\n// import { createPaypalOrder, capturePaypalOrder, loadPaypalDefault } from \"./paypal\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User profile routes\n  app.put('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const updateData = req.body;\n      \n      const user = await storage.updateUserProfile(userId, updateData);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Vehicle routes\n  app.post('/api/vehicles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const vehicleData = insertVehicleSchema.parse({\n        ...req.body,\n        userId\n      });\n      \n      const vehicle = await storage.createVehicle(vehicleData);\n      res.json(vehicle);\n    } catch (error) {\n      console.error(\"Error creating vehicle:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid vehicle data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create vehicle\" });\n      }\n    }\n  });\n\n  app.get('/api/vehicles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const vehicles = await storage.getUserVehicles(userId);\n      res.json(vehicles);\n    } catch (error) {\n      console.error(\"Error fetching vehicles:\", error);\n      res.status(500).json({ message: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  app.put('/api/vehicles/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const vehicleId = req.params.id;\n      const updateData = req.body;\n      \n      const vehicle = await storage.updateVehicle(vehicleId, updateData);\n      res.json(vehicle);\n    } catch (error) {\n      console.error(\"Error updating vehicle:\", error);\n      res.status(500).json({ message: \"Failed to update vehicle\" });\n    }\n  });\n\n  app.delete('/api/vehicles/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const vehicleId = req.params.id;\n      await storage.deleteVehicle(vehicleId);\n      res.json({ message: \"Vehicle deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting vehicle:\", error);\n      res.status(500).json({ message: \"Failed to delete vehicle\" });\n    }\n  });\n\n  // Ride routes\n  app.post('/api/rides', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const rideData = insertRideSchema.parse({\n        ...req.body,\n        driverId: userId\n      });\n      \n      const ride = await storage.createRide(rideData);\n      res.json(ride);\n    } catch (error) {\n      console.error(\"Error creating ride:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid ride data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create ride\" });\n      }\n    }\n  });\n\n  app.get('/api/rides/search', async (req, res) => {\n    try {\n      const { origin, destination, date, minSeats } = req.query;\n      \n      const filters: any = {};\n      if (origin) filters.origin = origin as string;\n      if (destination) filters.destination = destination as string;\n      if (date) filters.date = new Date(date as string);\n      if (minSeats) filters.minSeats = parseInt(minSeats as string);\n      \n      const rides = await storage.searchRides(filters);\n      res.json(rides);\n    } catch (error) {\n      console.error(\"Error searching rides:\", error);\n      res.status(500).json({ message: \"Failed to search rides\" });\n    }\n  });\n\n  app.get('/api/rides/:id', async (req, res) => {\n    try {\n      const rideId = req.params.id;\n      const ride = await storage.getRide(rideId);\n      \n      if (!ride) {\n        return res.status(404).json({ message: \"Ride not found\" });\n      }\n      \n      res.json(ride);\n    } catch (error) {\n      console.error(\"Error fetching ride:\", error);\n      res.status(500).json({ message: \"Failed to fetch ride\" });\n    }\n  });\n\n  app.get('/api/rides', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const { type = 'driver' } = req.query;\n      \n      const rides = await storage.getUserRides(userId, type as 'driver' | 'passenger');\n      res.json(rides);\n    } catch (error) {\n      console.error(\"Error fetching user rides:\", error);\n      res.status(500).json({ message: \"Failed to fetch rides\" });\n    }\n  });\n\n  app.put('/api/rides/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const rideId = req.params.id;\n      const updateData = req.body;\n      \n      const ride = await storage.updateRide(rideId, updateData);\n      res.json(ride);\n    } catch (error) {\n      console.error(\"Error updating ride:\", error);\n      res.status(500).json({ message: \"Failed to update ride\" });\n    }\n  });\n\n  app.delete('/api/rides/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const rideId = req.params.id;\n      await storage.deleteRide(rideId);\n      res.json({ message: \"Ride deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting ride:\", error);\n      res.status(500).json({ message: \"Failed to delete ride\" });\n    }\n  });\n\n  // Ride request routes\n  app.post('/api/ride-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const requestData = insertRideRequestSchema.parse({\n        ...req.body,\n        passengerId: userId\n      });\n      \n      const request = await storage.createRideRequest(requestData);\n      res.json(request);\n    } catch (error) {\n      console.error(\"Error creating ride request:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create ride request\" });\n      }\n    }\n  });\n\n  app.get('/api/ride-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const { rideId } = req.query;\n      \n      let requests;\n      if (rideId) {\n        requests = await storage.getRideRequests(rideId as string);\n      } else {\n        requests = await storage.getUserRideRequests(userId);\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching ride requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch ride requests\" });\n    }\n  });\n\n  app.put('/api/ride-requests/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const requestId = req.params.id;\n      const { status } = req.body;\n      \n      const request = await storage.updateRideRequestStatus(requestId, status);\n      res.json(request);\n    } catch (error) {\n      console.error(\"Error updating request status:\", error);\n      res.status(500).json({ message: \"Failed to update request status\" });\n    }\n  });\n\n  // Review routes\n  app.post('/api/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        reviewerId: userId\n      });\n      \n      const review = await storage.createReview(reviewData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid review data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create review\" });\n      }\n    }\n  });\n\n  app.get('/api/reviews/:userId', async (req, res) => {\n    try {\n      const userId = req.params.userId;\n      const reviews = await storage.getUserReviews(userId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // OTP Verification Routes\n  app.post(\"/api/auth/send-otp\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { phone } = req.body;\n      const userId = (req.user as any).claims.sub;\n      \n      // Generate 6-digit OTP\n      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\n      const otpExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n      \n      // Update user with OTP\n      await storage.updateUserOTP(userId, otpCode, otpExpiry);\n      \n      // In production, send SMS via Twilio/similar service\n      console.log(`OTP for ${phone}: ${otpCode}`);\n      \n      res.json({ message: \"OTP sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending OTP:\", error);\n      res.status(500).json({ message: \"Failed to send OTP\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify-otp\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { phone, otp } = req.body;\n      const userId = (req.user as any).claims.sub;\n      \n      const user = await storage.getUser(userId);\n      if (!user || user.otpCode !== otp || !user.otpExpiry || new Date() > user.otpExpiry) {\n        return res.status(400).json({ message: \"Invalid or expired OTP\" });\n      }\n      \n      // Mark phone as verified\n      await storage.verifyUserPhone(userId, phone);\n      \n      res.json({ message: \"Phone verified successfully\" });\n    } catch (error) {\n      console.error(\"Error verifying OTP:\", error);\n      res.status(500).json({ message: \"Failed to verify OTP\" });\n    }\n  });\n\n  // Emergency Alert Routes\n  app.post(\"/api/emergency/alert\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { rideId, alertType, location, message } = req.body;\n      const userId = (req.user as any).claims.sub;\n      \n      const alert = await storage.createEmergencyAlert({\n        userId,\n        rideId,\n        alertType,\n        location,\n        message,\n      });\n      \n      // In production, notify emergency services and contacts\n      console.log(`Emergency alert from user ${userId}:`, alert);\n      \n      res.json(alert);\n    } catch (error) {\n      console.error(\"Error creating emergency alert:\", error);\n      res.status(500).json({ message: \"Failed to create emergency alert\" });\n    }\n  });\n\n  // Chat Routes\n  app.get(\"/api/chat/:rideId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { rideId } = req.params;\n      const messages = await storage.getRideMessages(rideId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/chat/:rideId/messages\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { rideId } = req.params;\n      const { message, messageType = \"text\" } = req.body;\n      const senderId = (req.user as any).claims.sub;\n      \n      const chatMessage = await storage.createChatMessage({\n        rideId,\n        senderId,\n        message,\n        messageType,\n      });\n      \n      res.json(chatMessage);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // ID Verification Routes\n  app.post(\"/api/verify/upload\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { documentType, documentUrl } = req.body;\n      const userId = (req.user as any).claims.sub;\n      \n      const verification = await storage.createIdVerification({\n        userId,\n        documentType,\n        documentUrl,\n        status: \"pending\"\n      });\n      \n      res.json(verification);\n    } catch (error) {\n      console.error(\"Error uploading ID verification:\", error);\n      res.status(500).json({ message: \"Failed to upload verification\" });\n    }\n  });\n\n  app.get(\"/api/verify/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const verifications = await storage.getUserIdVerifications(userId);\n      res.json(verifications);\n    } catch (error) {\n      console.error(\"Error fetching verification status:\", error);\n      res.status(500).json({ message: \"Failed to fetch verification status\" });\n    }\n  });\n\n  // Admin Routes\n  app.get(\"/api/admin/users\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Note: In production, add admin role checking\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:userId/suspend\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const { suspended } = req.body;\n      \n      const user = await storage.suspendUser(userId, suspended);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user suspension:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.get(\"/api/admin/verifications\", isAuthenticated, async (req: any, res) => {\n    try {\n      const verifications = await storage.getPendingIdVerifications();\n      res.json(verifications);\n    } catch (error) {\n      console.error(\"Error fetching pending verifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch verifications\" });\n    }\n  });\n\n  app.put(\"/api/admin/verifications/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, reviewNotes } = req.body;\n      const reviewerId = (req.user as any).claims.sub;\n      \n      const verification = await storage.updateIdVerificationStatus(id, status, reviewNotes, reviewerId);\n      res.json(verification);\n    } catch (error) {\n      console.error(\"Error updating verification:\", error);\n      res.status(500).json({ message: \"Failed to update verification\" });\n    }\n  });\n\n  app.get(\"/api/admin/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const adminId = (req.user as any).claims.sub;\n      const settings = await storage.getAdminSettings(adminId);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching admin settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/admin/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const adminId = (req.user as any).claims.sub;\n      const settingsData = req.body;\n      \n      const settings = await storage.createAdminSettings({\n        adminId,\n        ...settingsData\n      });\n      \n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error creating admin settings:\", error);\n      res.status(500).json({ message: \"Failed to create settings\" });\n    }\n  });\n\n  app.put(\"/api/admin/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const adminId = (req.user as any).claims.sub;\n      const settingsData = req.body;\n      \n      const settings = await storage.updateAdminSettings(adminId, settingsData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating admin settings:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // PayPal Payment Routes\n  app.get(\"/paypal/setup\", async (req, res) => {\n    try {\n      // Mock implementation until PayPal keys are provided\n      res.json({\n        clientToken: \"mock_client_token\",\n        message: \"PayPal integration pending - need PAYPAL_CLIENT_ID and PAYPAL_CLIENT_SECRET\"\n      });\n    } catch (error) {\n      console.error(\"PayPal setup error:\", error);\n      res.status(500).json({ error: \"PayPal setup failed\" });\n    }\n  });\n\n  app.post(\"/paypal/order\", async (req, res) => {\n    try {\n      const { amount, currency = \"USD\", intent = \"CAPTURE\" } = req.body;\n      \n      // Mock implementation until PayPal keys are provided\n      res.json({\n        id: \"mock_order_\" + Date.now(),\n        status: \"CREATED\",\n        message: \"PayPal integration pending - need PAYPAL_CLIENT_ID and PAYPAL_CLIENT_SECRET\"\n      });\n    } catch (error) {\n      console.error(\"PayPal order creation error:\", error);\n      res.status(500).json({ error: \"Failed to create PayPal order\" });\n    }\n  });\n\n  app.post(\"/paypal/order/:orderID/capture\", async (req, res) => {\n    try {\n      const { orderID } = req.params;\n      \n      // Mock implementation until PayPal keys are provided\n      res.json({\n        id: orderID,\n        status: \"COMPLETED\",\n        message: \"PayPal integration pending - need PAYPAL_CLIENT_ID and PAYPAL_CLIENT_SECRET\"\n      });\n    } catch (error) {\n      console.error(\"PayPal capture error:\", error);\n      res.status(500).json({ error: \"Failed to capture PayPal order\" });\n    }\n  });\n\n  app.get(\"/api/payment/transactions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).claims.sub;\n      const transactions = await storage.getPaymentTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // PayPal routes (demo mode - requires API credentials)\n  app.get(\"/paypal/setup\", async (req, res) => {\n    res.json({ \n      clientToken: \"demo_token_requires_paypal_credentials\",\n      message: \"Demo mode - add PAYPAL_CLIENT_ID and PAYPAL_CLIENT_SECRET to process real payments\"\n    });\n  });\n\n  app.post(\"/paypal/order\", async (req, res) => {\n    res.json({ \n      id: \"demo_order_id\",\n      message: \"Demo mode - add PayPal credentials for real payment processing\"\n    });\n  });\n\n  app.post(\"/paypal/order/:orderID/capture\", async (req, res) => {\n    res.json({ \n      status: \"COMPLETED\",\n      message: \"Demo mode - payment would be processed with real PayPal credentials\"\n    });\n  });\n\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket server for real-time features\n  const wsManager = new WebSocketManager(httpServer);\n  \n  // Add WebSocket manager to routes for notifications\n  app.locals.wsManager = wsManager;\n  \n  return httpServer;\n}\n\n","size_bytes":19310},"server/storage.ts":{"content":"import {\n  users,\n  vehicles,\n  rides,\n  rideRequests,\n  reviews,\n  chatMessages,\n  emergencyAlerts,\n  idVerifications,\n  adminSettings,\n  paymentTransactions,\n  type User,\n  type UpsertUser,\n  type Vehicle,\n  type InsertVehicle,\n  type Ride,\n  type InsertRide,\n  type RideRequest,\n  type InsertRideRequest,\n  type Review,\n  type InsertReview,\n  type ChatMessage,\n  type InsertChatMessage,\n  type EmergencyAlert,\n  type InsertEmergencyAlert,\n  type IdVerification,\n  type InsertIdVerification,\n  type InsertAdminSettings,\n  type AdminSettings,\n  type RideWithDetails,\n  type RideRequestWithDetails,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, gte, lte, ne, sql, ilike } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations - mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserProfile(id: string, data: Partial<User>): Promise<User>;\n  \n  // Vehicle operations\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  getUserVehicles(userId: string): Promise<Vehicle[]>;\n  getVehicle(id: string): Promise<Vehicle | undefined>;\n  updateVehicle(id: string, data: Partial<Vehicle>): Promise<Vehicle>;\n  deleteVehicle(id: string): Promise<void>;\n  \n  // Ride operations\n  createRide(ride: InsertRide): Promise<Ride>;\n  getRide(id: string): Promise<RideWithDetails | undefined>;\n  searchRides(filters: {\n    origin?: string;\n    destination?: string;\n    date?: Date;\n    minSeats?: number;\n  }): Promise<RideWithDetails[]>;\n  getUserRides(userId: string, type: 'driver' | 'passenger'): Promise<RideWithDetails[]>;\n  updateRide(id: string, data: Partial<Ride>): Promise<Ride>;\n  deleteRide(id: string): Promise<void>;\n  \n  // Ride request operations\n  createRideRequest(request: InsertRideRequest): Promise<RideRequest>;\n  getRideRequest(id: string): Promise<RideRequestWithDetails | undefined>;\n  getRideRequests(rideId: string): Promise<RideRequestWithDetails[]>;\n  getUserRideRequests(userId: string): Promise<RideRequestWithDetails[]>;\n  updateRideRequestStatus(id: string, status: string): Promise<RideRequest>;\n  \n  // Review operations\n  createReview(review: InsertReview): Promise<Review>;\n  getRideReviews(rideId: string): Promise<Review[]>;\n  getUserReviews(userId: string): Promise<Review[]>;\n  \n  // Advanced features\n  updateUserOTP(id: string, otpCode: string, otpExpiry: Date): Promise<User>;\n  \n  // Payment operations\n  processPayment(payment: {\n    userId: string;\n    rideId: string;\n    amount: number;\n    paymentMethod: string;\n    status: string;\n  }): Promise<any>;\n  verifyUserPhone(id: string, phone: string): Promise<User>;\n  \n  // Chat operations\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getRideMessages(rideId: string): Promise<ChatMessage[]>;\n  markMessagesAsRead(rideId: string, userId: string): Promise<void>;\n  \n  // Emergency alert operations\n  createEmergencyAlert(alert: InsertEmergencyAlert): Promise<EmergencyAlert>;\n  getEmergencyAlerts(userId?: string): Promise<EmergencyAlert[]>;\n  updateEmergencyAlert(id: string, data: Partial<EmergencyAlert>): Promise<EmergencyAlert>;\n  \n  // ID verification operations\n  createIdVerification(verification: InsertIdVerification): Promise<IdVerification>;\n  getUserIdVerifications(userId: string): Promise<IdVerification[]>;\n  getIdVerifications(userId: string): Promise<IdVerification[]>;\n  updateIdVerificationStatus(id: string, status: string, reviewNotes?: string, reviewedBy?: string): Promise<IdVerification>;\n  getPendingIdVerifications(): Promise<IdVerification[]>;\n  \n  // Admin operations\n  createAdminSettings(settings: InsertAdminSettings): Promise<AdminSettings>;\n  getAdminSettings(adminId: string): Promise<AdminSettings | undefined>;\n  updateAdminSettings(adminId: string, data: Partial<AdminSettings>): Promise<AdminSettings>;\n  getAllUsers(): Promise<User[]>;\n  suspendUser(userId: string, suspended: boolean): Promise<User>;\n  \n  // Payment operations\n  createPaymentTransaction(transaction: any): Promise<any>;\n  updatePaymentTransaction(id: string, data: any): Promise<any>;\n  getPaymentTransactions(userId?: string): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserProfile(id: string, data: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(data)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Vehicle operations\n  async createVehicle(vehicle: InsertVehicle): Promise<Vehicle> {\n    const [newVehicle] = await db.insert(vehicles).values(vehicle as any).returning();\n    return newVehicle;\n  }\n\n  async getUserVehicles(userId: string): Promise<Vehicle[]> {\n    return await db.select().from(vehicles).where(eq(vehicles.userId, userId));\n  }\n\n  async getVehicle(id: string): Promise<Vehicle | undefined> {\n    const [vehicle] = await db.select().from(vehicles).where(eq(vehicles.id, id));\n    return vehicle;\n  }\n\n  async updateVehicle(id: string, data: Partial<Vehicle>): Promise<Vehicle> {\n    const [vehicle] = await db\n      .update(vehicles)\n      .set(data)\n      .where(eq(vehicles.id, id))\n      .returning();\n    return vehicle;\n  }\n\n  async deleteVehicle(id: string): Promise<void> {\n    await db.delete(vehicles).where(eq(vehicles.id, id));\n  }\n\n  // Ride operations\n  async createRide(ride: InsertRide): Promise<Ride> {\n    const [newRide] = await db.insert(rides).values(ride as any).returning();\n    return newRide;\n  }\n\n  async getRide(id: string): Promise<RideWithDetails | undefined> {\n    const result = await db\n      .select()\n      .from(rides)\n      .leftJoin(users, eq(rides.driverId, users.id))\n      .leftJoin(vehicles, eq(rides.vehicleId, vehicles.id))\n      .where(eq(rides.id, id));\n\n    if (result.length === 0) return undefined;\n\n    const ride = result[0].rides;\n    const driver = result[0].users!;\n    const vehicle = result[0].vehicles!;\n\n    // Get ride requests\n    const requestsResult = await db\n      .select()\n      .from(rideRequests)\n      .leftJoin(users, eq(rideRequests.passengerId, users.id))\n      .where(eq(rideRequests.rideId, id));\n\n    const requests = requestsResult.map(r => ({\n      ...r.ride_requests,\n      passenger: r.users!,\n    }));\n\n    return {\n      ...ride,\n      driver,\n      vehicle,\n      requests,\n    };\n  }\n\n  async searchRides(filters: {\n    origin?: string;\n    destination?: string;\n    date?: Date;\n    minSeats?: number;\n  }): Promise<RideWithDetails[]> {\n    let query = db\n      .select()\n      .from(rides)\n      .leftJoin(users, eq(rides.driverId, users.id))\n      .leftJoin(vehicles, eq(rides.vehicleId, vehicles.id))\n      .where(eq(rides.status, 'active'));\n\n    // Apply filters\n    const conditions = [eq(rides.status, 'active')];\n\n    if (filters.origin) {\n      conditions.push(eq(rides.origin, filters.origin));\n    }\n    \n    if (filters.destination) {\n      conditions.push(eq(rides.destination, filters.destination));\n    }\n    \n    if (filters.date) {\n      const startOfDay = new Date(filters.date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(filters.date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      conditions.push(\n        and(\n          gte(rides.departureDate, startOfDay),\n          lte(rides.departureDate, endOfDay)\n        )!\n      );\n    }\n    \n    if (filters.minSeats) {\n      conditions.push(gte(rides.availableSeats, filters.minSeats));\n    }\n\n    const finalQuery = db\n      .select()\n      .from(rides)\n      .leftJoin(users, eq(rides.driverId, users.id))\n      .leftJoin(vehicles, eq(rides.vehicleId, vehicles.id))\n      .where(conditions.length > 0 ? and(...conditions) : undefined)\n      .orderBy(asc(rides.departureDate));\n\n    const result = await finalQuery;\n\n    const ridesWithDetails: RideWithDetails[] = [];\n    \n    for (const row of result) {\n      const ride = row.rides;\n      const driver = row.users!;\n      const vehicle = row.vehicles!;\n\n      // Get ride requests for each ride\n      const requestsResult = await db\n        .select()\n        .from(rideRequests)\n        .leftJoin(users, eq(rideRequests.passengerId, users.id))\n        .where(eq(rideRequests.rideId, ride.id));\n\n      const requests = requestsResult.map(r => ({\n        ...r.ride_requests,\n        passenger: r.users!,\n      }));\n\n      ridesWithDetails.push({\n        ...ride,\n        driver,\n        vehicle,\n        requests,\n      });\n    }\n\n    return ridesWithDetails;\n  }\n\n  async getUserRides(userId: string, type: 'driver' | 'passenger'): Promise<RideWithDetails[]> {\n    if (type === 'driver') {\n      const result = await db\n        .select()\n        .from(rides)\n        .leftJoin(users, eq(rides.driverId, users.id))\n        .leftJoin(vehicles, eq(rides.vehicleId, vehicles.id))\n        .where(eq(rides.driverId, userId))\n        .orderBy(desc(rides.createdAt));\n\n      const ridesWithDetails: RideWithDetails[] = [];\n      \n      for (const row of result) {\n        const ride = row.rides;\n        const driver = row.users!;\n        const vehicle = row.vehicles!;\n\n        const requestsResult = await db\n          .select()\n          .from(rideRequests)\n          .leftJoin(users, eq(rideRequests.passengerId, users.id))\n          .where(eq(rideRequests.rideId, ride.id));\n\n        const requests = requestsResult.map(r => ({\n          ...r.ride_requests,\n          passenger: r.users!,\n        }));\n\n        ridesWithDetails.push({\n          ...ride,\n          driver,\n          vehicle,\n          requests,\n        });\n      }\n\n      return ridesWithDetails;\n    } else {\n      // Get rides where user has requests\n      const result = await db\n        .select()\n        .from(rideRequests)\n        .leftJoin(rides, eq(rideRequests.rideId, rides.id))\n        .leftJoin(users, eq(rides.driverId, users.id))\n        .leftJoin(vehicles, eq(rides.vehicleId, vehicles.id))\n        .where(eq(rideRequests.passengerId, userId))\n        .orderBy(desc(rideRequests.createdAt));\n\n      const ridesWithDetails: RideWithDetails[] = [];\n      \n      for (const row of result) {\n        if (!row.rides) continue;\n        \n        const ride = row.rides;\n        const driver = row.users!;\n        const vehicle = row.vehicles!;\n\n        const requestsResult = await db\n          .select()\n          .from(rideRequests)\n          .leftJoin(users, eq(rideRequests.passengerId, users.id))\n          .where(eq(rideRequests.rideId, ride.id));\n\n        const requests = requestsResult.map(r => ({\n          ...r.ride_requests,\n          passenger: r.users!,\n        }));\n\n        ridesWithDetails.push({\n          ...ride,\n          driver,\n          vehicle,\n          requests,\n        });\n      }\n\n      return ridesWithDetails;\n    }\n  }\n\n  async updateRide(id: string, data: Partial<Ride>): Promise<Ride> {\n    const [ride] = await db\n      .update(rides)\n      .set(data)\n      .where(eq(rides.id, id))\n      .returning();\n    return ride;\n  }\n\n  async deleteRide(id: string): Promise<void> {\n    await db.delete(rides).where(eq(rides.id, id));\n  }\n\n  // Ride request operations\n  async createRideRequest(request: InsertRideRequest): Promise<RideRequest> {\n    const [newRequest] = await db.insert(rideRequests).values(request as any).returning();\n    return newRequest;\n  }\n\n  async getRideRequest(id: string): Promise<RideRequestWithDetails | undefined> {\n    const result = await db\n      .select()\n      .from(rideRequests)\n      .leftJoin(rides, eq(rideRequests.rideId, rides.id))\n      .leftJoin(users, eq(rideRequests.passengerId, users.id))\n      .where(eq(rideRequests.id, id));\n\n    if (result.length === 0) return undefined;\n\n    const request = result[0].ride_requests;\n    const ride = result[0].rides!;\n    const passenger = result[0].users!;\n\n    // Get full ride details\n    const rideDetails = await this.getRide(ride.id);\n    \n    return {\n      ...request,\n      ride: rideDetails!,\n      passenger,\n    };\n  }\n\n  async getRideRequests(rideId: string): Promise<RideRequestWithDetails[]> {\n    const result = await db\n      .select()\n      .from(rideRequests)\n      .leftJoin(users, eq(rideRequests.passengerId, users.id))\n      .where(eq(rideRequests.rideId, rideId))\n      .orderBy(desc(rideRequests.createdAt));\n\n    const requestsWithDetails: RideRequestWithDetails[] = [];\n    \n    for (const row of result) {\n      const request = row.ride_requests;\n      const passenger = row.users!;\n      const rideDetails = await this.getRide(rideId);\n\n      requestsWithDetails.push({\n        ...request,\n        ride: rideDetails!,\n        passenger,\n      });\n    }\n\n    return requestsWithDetails;\n  }\n\n  async getUserRideRequests(userId: string): Promise<RideRequestWithDetails[]> {\n    const result = await db\n      .select()\n      .from(rideRequests)\n      .leftJoin(users, eq(rideRequests.passengerId, users.id))\n      .where(eq(rideRequests.passengerId, userId))\n      .orderBy(desc(rideRequests.createdAt));\n\n    const requestsWithDetails: RideRequestWithDetails[] = [];\n    \n    for (const row of result) {\n      const request = row.ride_requests;\n      const passenger = row.users!;\n      const rideDetails = await this.getRide(request.rideId);\n\n      requestsWithDetails.push({\n        ...request,\n        ride: rideDetails!,\n        passenger,\n      });\n    }\n\n    return requestsWithDetails;\n  }\n\n  async updateRideRequestStatus(id: string, status: string): Promise<RideRequest> {\n    const [request] = await db\n      .update(rideRequests)\n      .set({ status } as any)\n      .where(eq(rideRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  // Review operations\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review as any).returning();\n    return newReview;\n  }\n\n  async getRideReviews(rideId: string): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.rideId, rideId));\n  }\n\n  async getUserReviews(userId: string): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.revieweeId, userId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  // Advanced features implementation\n  async updateUserOTP(id: string, otpCode: string, otpExpiry: Date): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ otpCode, otpExpiry, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async verifyUserPhone(id: string, phone: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        phone, \n        phoneVerified: true, \n        otpCode: null, \n        otpExpiry: null,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message as any).returning();\n    return newMessage;\n  }\n\n  async getChatMessages(rideId: string): Promise<ChatMessage[]> {\n    const result = await db\n      .select()\n      .from(chatMessages)\n      .leftJoin(users, eq(chatMessages.senderId, users.id))\n      .where(eq(chatMessages.rideId, rideId))\n      .orderBy(asc(chatMessages.createdAt));\n\n    return result.map(row => ({\n      ...row.chat_messages,\n      sender: row.users!,\n    })) as any;\n  }\n\n  async createEmergencyAlert(alert: InsertEmergencyAlert): Promise<EmergencyAlert> {\n    const [newAlert] = await db.insert(emergencyAlerts).values(alert as any).returning();\n    return newAlert;\n  }\n\n  async getEmergencyAlerts(userId: string): Promise<EmergencyAlert[]> {\n    return await db.select().from(emergencyAlerts)\n      .where(eq(emergencyAlerts.userId, userId))\n      .orderBy(desc(emergencyAlerts.createdAt));\n  }\n\n  async createIdVerification(verification: InsertIdVerification): Promise<IdVerification> {\n    const [newVerification] = await db.insert(idVerifications).values(verification as any).returning();\n    return newVerification;\n  }\n\n  async getIdVerifications(userId: string): Promise<IdVerification[]> {\n    return await db.select().from(idVerifications)\n      .where(eq(idVerifications.userId, userId))\n      .orderBy(desc(idVerifications.createdAt));\n  }\n\n  async getUserIdVerifications(userId: string): Promise<IdVerification[]> {\n    return this.getIdVerifications(userId);\n  }\n\n  async getPendingIdVerifications(): Promise<IdVerification[]> {\n    return await db.select().from(idVerifications)\n      .where(eq(idVerifications.status, 'pending'))\n      .orderBy(desc(idVerifications.createdAt));\n  }\n\n  async updateIdVerificationStatus(id: string, status: string, reviewNotes?: string, reviewedBy?: string): Promise<IdVerification> {\n    const [verification] = await db\n      .update(idVerifications)\n      .set({ \n        reviewNotes,\n        reviewedBy: reviewedBy || null,\n        reviewedAt: new Date()\n      } as any)\n      .where(eq(idVerifications.id, id))\n      .returning();\n    return verification;\n  }\n\n  // Admin methods implementation\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async suspendUser(userId: string, suspended: boolean): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ suspended })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getAllRides(): Promise<RideWithDetails[]> {\n    const result = await db\n      .select()\n      .from(rides)\n      .leftJoin(users, eq(rides.driverId, users.id))\n      .leftJoin(vehicles, eq(rides.vehicleId, vehicles.id))\n      .orderBy(desc(rides.createdAt));\n\n    return result.map(row => ({\n      ...row.rides,\n      driver: row.users!,\n      vehicle: row.vehicles!,\n      requests: [], // Simplified for admin view\n    })) as RideWithDetails[];\n  }\n\n  async getAllEmergencyAlerts(): Promise<EmergencyAlert[]> {\n    return await db.select().from(emergencyAlerts)\n      .orderBy(desc(emergencyAlerts.createdAt));\n  }\n\n  async getAllIdVerifications(): Promise<IdVerification[]> {\n    const result = await db\n      .select()\n      .from(idVerifications)\n      .leftJoin(users, eq(idVerifications.userId, users.id))\n      .orderBy(desc(idVerifications.createdAt));\n\n    return result.map(row => ({\n      ...row.id_verifications,\n      user: row.users!,\n    })) as any;\n  }\n\n  async getTotalUsers(): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` }).from(users);\n    return result[0].count;\n  }\n\n  async getNewUsersCount(days: number): Promise<number> {\n    const dateThreshold = new Date();\n    dateThreshold.setDate(dateThreshold.getDate() - days);\n    \n    const result = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(gte(users.createdAt, dateThreshold));\n    \n    return result[0].count;\n  }\n\n  async getActiveRidesCount(): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(rides)\n      .where(eq(rides.status, 'active'));\n    \n    return result[0].count;\n  }\n\n  async getCompletedRidesCount(days: number): Promise<number> {\n    const dateThreshold = new Date();\n    dateThreshold.setDate(dateThreshold.getDate() - days);\n    \n    const result = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(rides)\n      .where(and(\n        eq(rides.status, 'completed'),\n        gte(rides.createdAt, dateThreshold)\n      ));\n    \n    return result[0].count;\n  }\n\n  async updateUserSuspension(id: string, suspended: boolean): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ suspended, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Admin settings implementation\n  async getAdminSettings(adminId: string): Promise<AdminSettings | undefined> {\n    const [settings] = await db.select().from(adminSettings)\n      .where(eq(adminSettings.adminId, adminId));\n    return settings;\n  }\n\n  async createAdminSettings(settings: InsertAdminSettings): Promise<AdminSettings> {\n    const [newSettings] = await db.insert(adminSettings).values(settings as any).returning();\n    return newSettings;\n  }\n\n  async updateAdminSettings(adminId: string, settingsData: Partial<InsertAdminSettings>): Promise<AdminSettings> {\n    const [updatedSettings] = await db\n      .update(adminSettings)\n      .set({ ...settingsData } as any)\n      .where(eq(adminSettings.adminId, adminId))\n      .returning();\n    return updatedSettings;\n  }\n\n  // Payment operations\n  async getPaymentTransactions(userId?: string): Promise<any[]> {\n    // Mock implementation for credit-based system\n    return [];\n  }\n\n  async createPaymentTransaction(transaction: any): Promise<any> {\n    // Mock implementation for credit-based system\n    return { id: \"tx_\" + Date.now(), ...transaction };\n  }\n\n  async updatePaymentTransaction(id: string, data: any): Promise<any> {\n    // Mock implementation for credit-based system\n    return { id, ...data };\n  }\n\n  // Credit-based payment processing\n  async processPayment(payment: {\n    userId: string;\n    rideId: string;\n    amount: number;\n    paymentMethod: string;\n    status: string;\n  }): Promise<any> {\n    // In a real app, this would deduct credits from user's balance\n    // and create a transaction record\n    return {\n      id: \"payment_\" + Date.now(),\n      ...payment,\n      createdAt: new Date().toISOString()\n    };\n  }\n\n  // Missing chat operations\n  async getRideMessages(rideId: string): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.rideId, rideId))\n      .orderBy(asc(chatMessages.createdAt));\n  }\n\n  async markMessagesAsRead(rideId: string, userId: string): Promise<void> {\n    // Mock implementation - in real app would update read status\n  }\n\n  // Missing emergency operations\n  async updateEmergencyAlert(id: string, data: Partial<EmergencyAlert>): Promise<EmergencyAlert> {\n    const [alert] = await db\n      .update(emergencyAlerts)\n      .set(data)\n      .where(eq(emergencyAlerts.id, id))\n      .returning();\n    return alert;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":22678},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - mandatory for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  phone: varchar(\"phone\"),\n  phoneVerified: boolean(\"phone_verified\").default(false),\n  otpCode: varchar(\"otp_code\"),\n  otpExpiry: timestamp(\"otp_expires_at\"),\n  suspended: boolean(\"suspended\").default(false),\n  age: integer(\"age\"),\n  gender: varchar(\"gender\"),\n  address: text(\"address\"),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  totalRides: integer(\"total_rides\").default(0),\n  isVerified: boolean(\"is_verified\").default(false),\n  idDocumentUrl: varchar(\"id_document_url\"),\n  emergencyContact: varchar(\"emergency_contact\"),\n  currentLocation: jsonb(\"current_location\"),\n  paypalEmail: varchar(\"paypal_email\"), // User's PayPal email for receiving payments\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vehicles table\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  make: varchar(\"make\").notNull(),\n  model: varchar(\"model\").notNull(),\n  year: integer(\"year\").notNull(),\n  color: varchar(\"color\").notNull(),\n  licensePlate: varchar(\"license_plate\").notNull(),\n  seats: integer(\"seats\").notNull().default(4),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Rides table\nexport const rides = pgTable(\"rides\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  vehicleId: varchar(\"vehicle_id\").notNull().references(() => vehicles.id, { onDelete: \"cascade\" }),\n  origin: text(\"origin\").notNull(),\n  destination: text(\"destination\").notNull(),\n  departureDate: timestamp(\"departure_date\").notNull(),\n  availableSeats: integer(\"available_seats\").notNull(),\n  pricePerSeat: decimal(\"price_per_seat\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\").notNull().default(\"active\"), // active, completed, cancelled\n  notes: text(\"notes\"),\n  currentLocation: jsonb(\"current_location\"),\n  estimatedArrival: timestamp(\"estimated_arrival\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Ride requests table\nexport const rideRequests = pgTable(\"ride_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rideId: varchar(\"ride_id\").notNull().references(() => rides.id, { onDelete: \"cascade\" }),\n  passengerId: varchar(\"passenger_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  seatsRequested: integer(\"seats_requested\").notNull().default(1),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, accepted, rejected, cancelled\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rideId: varchar(\"ride_id\").notNull().references(() => rides.id, { onDelete: \"cascade\" }),\n  reviewerId: varchar(\"reviewer_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  revieweeId: varchar(\"reviewee_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Chat messages table\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rideId: varchar(\"ride_id\").notNull().references(() => rides.id, { onDelete: \"cascade\" }),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  messageType: varchar(\"message_type\").default(\"text\"), // text, location, image\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Emergency alerts table\nexport const emergencyAlerts = pgTable(\"emergency_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  rideId: varchar(\"ride_id\").references(() => rides.id, { onDelete: \"cascade\" }),\n  alertType: varchar(\"alert_type\").notNull(), // sos, breakdown, accident\n  location: jsonb(\"location\").notNull(),\n  message: text(\"message\"),\n  status: varchar(\"status\").default(\"active\"), // active, resolved\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// ID verification documents table\nexport const idVerifications = pgTable(\"id_verifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  documentType: varchar(\"document_type\").notNull(), // license, passport, national_id\n  documentUrl: varchar(\"document_url\").notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, approved, rejected\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewNotes: text(\"review_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n});\n\n// Payment transactions table\nexport const paymentTransactions = pgTable(\"payment_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rideRequestId: varchar(\"ride_request_id\").notNull().references(() => rideRequests.id, { onDelete: \"cascade\" }),\n  payerId: varchar(\"payer_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  recipientId: varchar(\"recipient_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, completed, failed, refunded\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Admin settings table\nexport const adminSettings = pgTable(\"admin_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  paypalEmail: varchar(\"paypal_email\"), // Admin's PayPal email for receiving payments\n  paypalClientId: varchar(\"paypal_client_id\"), // Admin's PayPal app client ID\n  paypalClientSecret: varchar(\"paypal_client_secret\"), // Admin's PayPal app client secret\n  paypalEnvironment: varchar(\"paypal_environment\").default(\"sandbox\"), // sandbox or production\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).default(\"0.10\"), // 10% default\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  vehicles: many(vehicles),\n  ridesAsDriver: many(rides),\n  rideRequests: many(rideRequests),\n  reviewsGiven: many(reviews, { relationName: \"reviewer\" }),\n  reviewsReceived: many(reviews, { relationName: \"reviewee\" }),\n  chatMessages: many(chatMessages),\n  emergencyAlerts: many(emergencyAlerts),\n  idVerifications: many(idVerifications),\n  paymentsSent: many(paymentTransactions, { relationName: \"payer\" }),\n  paymentsReceived: many(paymentTransactions, { relationName: \"recipient\" }),\n}));\n\nexport const vehiclesRelations = relations(vehicles, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [vehicles.userId],\n    references: [users.id],\n  }),\n  rides: many(rides),\n}));\n\nexport const ridesRelations = relations(rides, ({ one, many }) => ({\n  driver: one(users, {\n    fields: [rides.driverId],\n    references: [users.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [rides.vehicleId],\n    references: [vehicles.id],\n  }),\n  requests: many(rideRequests),\n  reviews: many(reviews),\n  chatMessages: many(chatMessages),\n  emergencyAlerts: many(emergencyAlerts),\n}));\n\nexport const rideRequestsRelations = relations(rideRequests, ({ one }) => ({\n  ride: one(rides, {\n    fields: [rideRequests.rideId],\n    references: [rides.id],\n  }),\n  passenger: one(users, {\n    fields: [rideRequests.passengerId],\n    references: [users.id],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  ride: one(rides, {\n    fields: [reviews.rideId],\n    references: [rides.id],\n  }),\n  reviewer: one(users, {\n    fields: [reviews.reviewerId],\n    references: [users.id],\n    relationName: \"reviewer\",\n  }),\n  reviewee: one(users, {\n    fields: [reviews.revieweeId],\n    references: [users.id],\n    relationName: \"reviewee\",\n  }),\n}));\n\n// New relations for advanced features\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  ride: one(rides, {\n    fields: [chatMessages.rideId],\n    references: [rides.id],\n  }),\n  sender: one(users, {\n    fields: [chatMessages.senderId],\n    references: [users.id],\n  }),\n}));\n\nexport const emergencyAlertsRelations = relations(emergencyAlerts, ({ one }) => ({\n  user: one(users, {\n    fields: [emergencyAlerts.userId],\n    references: [users.id],\n  }),\n  ride: one(rides, {\n    fields: [emergencyAlerts.rideId],\n    references: [rides.id],\n  }),\n}));\n\nexport const idVerificationsRelations = relations(idVerifications, ({ one }) => ({\n  user: one(users, {\n    fields: [idVerifications.userId],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [idVerifications.reviewedBy],\n    references: [users.id],\n    relationName: \"idReviewer\",\n  }),\n}));\n\n// Insert schemas  \nexport const insertUserSchema = createInsertSchema(users);\n\nexport const insertVehicleSchema = createInsertSchema(vehicles);\nexport const insertRideSchema = createInsertSchema(rides);\nexport const insertRideRequestSchema = createInsertSchema(rideRequests);\nexport const insertReviewSchema = createInsertSchema(reviews);\nexport const insertChatMessageSchema = createInsertSchema(chatMessages);\nexport const insertEmergencyAlertSchema = createInsertSchema(emergencyAlerts);\nexport const insertIdVerificationSchema = createInsertSchema(idVerifications);\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\n\nexport type Ride = typeof rides.$inferSelect;\nexport type InsertRide = z.infer<typeof insertRideSchema>;\n\nexport type RideRequest = typeof rideRequests.$inferSelect;\nexport type InsertRideRequest = z.infer<typeof insertRideRequestSchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type EmergencyAlert = typeof emergencyAlerts.$inferSelect;\nexport type InsertEmergencyAlert = z.infer<typeof insertEmergencyAlertSchema>;\n\nexport type IdVerification = typeof idVerifications.$inferSelect;\n\n\n\nexport const insertPaymentTransactionSchema = createInsertSchema(paymentTransactions);\nexport const insertAdminSettingsSchema = createInsertSchema(adminSettings);\n\nexport type InsertAdminSettings = z.infer<typeof insertAdminSettingsSchema>;\nexport type AdminSettings = typeof adminSettings.$inferSelect;\nexport type InsertIdVerification = z.infer<typeof insertIdVerificationSchema>;\nexport type PaymentTransaction = typeof paymentTransactions.$inferSelect;\nexport type InsertPaymentTransaction = z.infer<typeof insertPaymentTransactionSchema>;\n\n// Extended types for API responses\nexport type RideWithDetails = Ride & {\n  driver: User;\n  vehicle: Vehicle;\n  requests: (RideRequest & { passenger: User })[];\n};\n\nexport type RideRequestWithDetails = RideRequest & {\n  ride: RideWithDetails;\n  passenger: User;\n};\n","size_bytes":12712},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCapacitor } from \"@/hooks/useCapacitor\";\nimport Messages from \"@/pages/messages\";\nimport Chat from \"@/pages/chat\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Profile from \"@/pages/profile\";\nimport RideHistory from \"@/pages/ride-history\";\nimport PaymentPage from \"@/pages/payment\";\nimport AdminPortal from \"@/pages/admin-simple\";\nimport Admin from \"@/pages/admin\";\nimport Settings from \"@/pages/settings\";\nimport Emergency from \"@/pages/emergency\";\nimport OTPVerification from \"@/pages/otp-verification\";\nimport IdVerification from \"@/pages/id-verification\";\nimport GPSDemo from \"@/pages/gps-demo\";\nimport TestAll from \"@/pages/test-all\";\nimport MobileGPS from \"@/pages/mobile-gps\";\nimport PayPalButton from \"@/components/PayPalButton\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { isNative, platform } = useCapacitor();\n\n  return (\n    <Switch>\n      {/* Routes accessible without authentication */}\n      <Route path=\"/admin-simple\" component={AdminPortal} />\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/messages\" component={Messages} />\n          <Route path=\"/chat/:rideId\" component={Chat} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/history\" component={RideHistory} />\n          <Route path=\"/payment/:rideId\" component={PaymentPage} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/emergency\" component={Emergency} />\n          <Route path=\"/verify-otp\" component={OTPVerification} />\n          <Route path=\"/verify-id\" component={IdVerification} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/gps-demo\" component={GPSDemo} />\n          <Route path=\"/mobile-gps\" component={MobileGPS} />\n          <Route path=\"/test-all\" component={TestAll} />\n          <Route path=\"/paypal-demo\" component={() => (\n            <div className=\"min-h-screen bg-gray-50 p-8\">\n              <div className=\"max-w-2xl mx-auto\">\n                <h1 className=\"text-3xl font-bold mb-6 text-sky-600\">PayPal Payment Demo</h1>\n                <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n                  <h2 className=\"text-xl font-semibold mb-4\">Sample Ride Payment</h2>\n                  <div className=\"mb-6 p-4 bg-sky-50 rounded-lg\">\n                    <p className=\"mb-2\"><strong>Route:</strong> Downtown → Airport</p>\n                    <p className=\"mb-2\"><strong>Date:</strong> Tomorrow 2:00 PM</p>\n                    <p className=\"mb-2\"><strong>Driver:</strong> John Smith</p>\n                    <p className=\"text-xl font-bold text-green-600\"><strong>Price:</strong> $25.00</p>\n                  </div>\n                  <div className=\"border-t pt-4\">\n                    <p className=\"text-sm text-gray-600 mb-3\">\n                      Pay securely with PayPal or credit card\n                    </p>\n                    <PayPalButton amount=\"25.00\" currency=\"USD\" intent=\"CAPTURE\" />\n                  </div>\n                  <div className=\"mt-4 text-xs text-gray-500\">\n                    <p>Demo mode - requires PayPal API credentials to process real payments</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4127},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(195, 70%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(195, 70%, 54%);\n  --radius: 0.75rem;\n  \n  /* Sky blue color scheme */\n  --sky-blue: hsl(194, 70%, 75%);\n  --sky-blue-dark: hsl(207, 78%, 59%);\n  --sky-blue-light: hsl(194, 100%, 94%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(195, 70%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(195, 70%, 54%);\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-sky-blue {\n    color: hsl(194, 70%, 75%);\n  }\n  \n  .text-sky-blue-dark {\n    color: hsl(207, 78%, 59%);\n  }\n  \n  .text-sky-blue-light {\n    color: hsl(194, 100%, 94%);\n  }\n  \n  .bg-sky-blue {\n    background-color: hsl(194, 70%, 75%);\n  }\n  \n  .bg-sky-blue-dark {\n    background-color: hsl(207, 78%, 59%);\n  }\n  \n  .bg-sky-blue-light {\n    background-color: hsl(194, 100%, 94%);\n  }\n  \n  .border-sky-blue {\n    border-color: hsl(194, 70%, 75%);\n  }\n  \n  .border-sky-blue-dark {\n    border-color: hsl(207, 78%, 59%);\n  }\n  \n  .border-sky-blue-light {\n    border-color: hsl(194, 100%, 94%);\n  }\n  \n  .hover\\:bg-sky-blue:hover {\n    background-color: hsl(194, 70%, 75%);\n  }\n  \n  .hover\\:bg-sky-blue-dark:hover {\n    background-color: hsl(207, 78%, 59%);\n  }\n  \n  .hover\\:text-sky-blue:hover {\n    color: hsl(194, 70%, 75%);\n  }\n  \n  .hover\\:text-sky-blue-dark:hover {\n    color: hsl(207, 78%, 59%);\n  }\n  \n  .focus\\:ring-sky-blue:focus {\n    --tw-ring-color: hsl(194, 70%, 75%);\n  }\n  \n  .focus\\:border-sky-blue:focus {\n    border-color: hsl(194, 70%, 75%);\n  }\n}\n\n/* Custom scrollbar for better UX */\n.overflow-y-auto::-webkit-scrollbar {\n  width: 6px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: hsl(210, 40%, 96%);\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background: hsl(195, 70%, 54%);\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb:hover {\n  background: hsl(207, 78%, 59%);\n}\n\n/* Mobile bottom navigation padding */\n@media (max-width: 768px) {\n  .pb-mobile-nav {\n    padding-bottom: 5rem;\n  }\n}\n\n/* Animation for loading states */\n@keyframes pulse-sky {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse-sky {\n  animation: pulse-sky 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Gradient backgrounds for hero sections */\n.bg-gradient-sky {\n  background: linear-gradient(135deg, hsl(194, 100%, 94%) 0%, hsl(0, 0%, 100%) 100%);\n}\n\n/* Form focus states with sky blue theme */\n.form-input:focus {\n  --tw-ring-color: hsl(195, 70%, 54%);\n  border-color: hsl(195, 70%, 54%);\n}\n\n/* Button variants for sky blue theme */\n.btn-sky {\n  background-color: hsl(195, 70%, 54%);\n  color: hsl(210, 40%, 98%);\n}\n\n.btn-sky:hover {\n  background-color: hsl(207, 78%, 59%);\n}\n\n.btn-sky-outline {\n  border: 1px solid hsl(195, 70%, 54%);\n  color: hsl(195, 70%, 54%);\n  background-color: transparent;\n}\n\n.btn-sky-outline:hover {\n  background-color: hsl(194, 100%, 94%);\n}\n\n/* Status badge colors */\n.status-active {\n  background-color: hsl(142, 76%, 90%);\n  color: hsl(142, 76%, 36%);\n}\n\n.status-pending {\n  background-color: hsl(48, 96%, 89%);\n  color: hsl(48, 96%, 53%);\n}\n\n.status-completed {\n  background-color: hsl(195, 100%, 90%);\n  color: hsl(195, 100%, 45%);\n}\n\n.status-cancelled {\n  background-color: hsl(0, 93%, 94%);\n  color: hsl(0, 93%, 60%);\n}\n","size_bytes":4687},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User } from \"@shared/schema\";\nimport { Bell, User as UserIcon, History, Settings, LogOut, Home, Search, Car, MessageSquare, CheckCircle } from \"lucide-react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport default function Navigation() {\n  const { user, isLoading } = useAuth() as { user: User | undefined; isLoading: boolean };\n  const [location] = useLocation();\n  const isMobile = useIsMobile();\n  const [notifications] = useState(3); // Mock notification count\n  const [notificationsList, setNotificationsList] = useState([\n    {\n      id: 1,\n      type: \"ride_request\",\n      title: \"New ride request\",\n      message: \"Sarah wants to join your ride to Downtown\",\n      time: \"5 minutes ago\",\n      read: false,\n      icon: Home,\n      rideId: \"ride-123\",\n      actionUrl: \"/rides/ride-123/chat\"\n    },\n    {\n      id: 2,\n      type: \"message\",\n      title: \"New message\",\n      message: \"Driver: I'm running 5 minutes late\",\n      time: \"15 minutes ago\",\n      read: false,\n      icon: Bell,\n      rideId: \"ride-456\",\n      actionUrl: \"/rides/ride-456/chat\"\n    },\n    {\n      id: 3,\n      type: \"ride_completed\",\n      title: \"Ride completed\",\n      message: \"Your ride to Airport has been completed\",\n      time: \"2 hours ago\",\n      read: true,\n      icon: History,\n      rideId: \"ride-789\",\n      actionUrl: \"/history\"\n    }\n  ]);\n\n  const handleNotificationClick = (notification: any) => {\n    // Mark notification as read\n    setNotificationsList(prev => \n      prev.map(n => n.id === notification.id ? { ...n, read: true } : n)\n    );\n\n    // Navigate based on notification type using window.location\n    if (notification.type === \"ride_request\") {\n      // For ride requests, show a simple alert and go to home for now\n      alert(`Ride request from Sarah! You can communicate with them through the ride details.`);\n      window.location.href = \"/\";\n    } else if (notification.type === \"message\") {\n      // For messages, show alert and go to messages\n      alert(`New message from your ride partner! Check your ride messages.`);\n      window.location.href = \"/messages\";\n    } else if (notification.type === \"ride_completed\") {\n      // For completed rides, go to ride history\n      window.location.href = \"/history\";\n    } else {\n      // Default: go to home\n      window.location.href = \"/\";\n    }\n  };\n\n  // Check if user is admin - temporarily allow current user for testing\n  const isAdmin = user?.email === \"admin@oneroute.com\" || user?.id === \"admin\" || user?.email === \"johanlabuschagne20@gmail.com\";\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"Home\" },\n    { path: \"/messages\", icon: MessageSquare, label: \"Messages\" },\n    { path: \"/history\", icon: History, label: \"History\" },\n    { path: \"/profile\", icon: UserIcon, label: \"Profile\" },\n    ...(isAdmin ? [{ path: \"/admin\", icon: Settings, label: \"Admin\" }] : []),\n  ];\n\n  return (\n    <>\n      {/* Desktop Navigation */}\n      <nav className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center\">\n              <Link href=\"/\">\n                <div className=\"flex items-center space-x-3\">\n                  <img \n                    src=\"/one-route-logo.png\" \n                    alt=\"One Route Logo\" \n                    className=\"h-10 w-10 cursor-pointer hover:opacity-90 transition-opacity\"\n                  />\n                  <span className=\"text-xl font-bold text-sky-600\">One Route</span>\n                </div>\n              </Link>\n            </div>\n            \n            {/* Desktop Navigation Items */}\n            {!isMobile && (\n              <div className=\"hidden md:flex items-center space-x-8\">\n                {navItems.map((item) => {\n                  const Icon = item.icon;\n                  const isActive = location === item.path;\n                  return (\n                    <Link key={item.path} href={item.path}>\n                      <div className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors cursor-pointer ${\n                        isActive \n                          ? 'text-sky-600 bg-sky-50' \n                          : 'text-gray-600 hover:text-sky-600 hover:bg-sky-50'\n                      }`}>\n                        <Icon className=\"w-4 h-4\" />\n                        <span>{item.label}</span>\n                      </div>\n                    </Link>\n                  );\n                })}\n              </div>\n            )}\n            \n            {/* User Profile Section */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Notifications */}\n              <Popover>\n                <PopoverTrigger asChild>\n                  <div className=\"relative\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"bg-sky-50 hover:bg-sky-100 text-sky-600 p-2 rounded-full\"\n                      aria-label=\"Notifications\"\n                    >\n                      <Bell className=\"w-4 h-4\" />\n                    </Button>\n                    {notifications > 0 && (\n                      <Badge className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center p-0 min-w-0\">\n                        {notifications}\n                      </Badge>\n                    )}\n                  </div>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-80 p-0\" align=\"end\">\n                  <div className=\"flex items-center justify-between p-4 border-b\">\n                    <h4 className=\"font-semibold\">Notifications</h4>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-sky-600 hover:text-sky-700\">\n                      Mark all read\n                    </Button>\n                  </div>\n                  <ScrollArea className=\"h-[400px]\">\n                    {notificationsList.length === 0 ? (\n                      <div className=\"p-4 text-center text-gray-500\">\n                        <Bell className=\"w-8 h-8 mx-auto mb-2 text-gray-300\" />\n                        <p>No notifications yet</p>\n                      </div>\n                    ) : (\n                      <div className=\"divide-y\">\n                        {notificationsList.map((notification) => {\n                          const Icon = notification.icon;\n                          return (\n                            <div\n                              key={notification.id}\n                              className={`p-4 hover:bg-gray-50 cursor-pointer transition-colors ${\n                                !notification.read ? 'bg-sky-50 border-l-4 border-l-sky-500' : ''\n                              }`}\n                              onClick={() => handleNotificationClick(notification)}\n                            >\n                              <div className=\"flex items-start space-x-3\">\n                                <div className={`p-2 rounded-full ${\n                                  notification.type === 'ride_request' ? 'bg-blue-100 text-blue-600' :\n                                  notification.type === 'message' ? 'bg-green-100 text-green-600' :\n                                  'bg-gray-100 text-gray-600'\n                                }`}>\n                                  <Icon className=\"w-4 h-4\" />\n                                </div>\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"flex items-start justify-between\">\n                                    <h5 className=\"text-sm font-medium text-gray-900 truncate\">\n                                      {notification.title}\n                                    </h5>\n                                    {!notification.read && (\n                                      <div className=\"w-2 h-2 bg-sky-500 rounded-full ml-2\" />\n                                    )}\n                                  </div>\n                                  <p className=\"text-sm text-gray-600 mt-1\">\n                                    {notification.message}\n                                  </p>\n                                  <p className=\"text-xs text-gray-400 mt-1\">\n                                    {notification.time}\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </ScrollArea>\n                  <div className=\"p-4 border-t bg-gray-50\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"w-full text-sky-600 hover:text-sky-700\">\n                      View all notifications\n                    </Button>\n                  </div>\n                </PopoverContent>\n              </Popover>\n              \n              {/* User Dropdown */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <div \n                    className=\"flex items-center space-x-2 cursor-pointer hover:bg-gray-50 rounded-lg p-2 transition-colors\"\n                    role=\"button\"\n                    aria-label=\"User menu\"\n                    tabIndex={0}\n                  >\n                    <Avatar className=\"w-8 h-8 border-2 border-sky-500\">\n                      <AvatarImage src={user?.profileImageUrl || \"\"} />\n                      <AvatarFallback className=\"bg-sky-100 text-sky-700\">\n                        {user?.firstName?.[0]}{user?.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    {!isMobile && (\n                      <div className=\"hidden sm:block\">\n                        <p className=\"text-sm font-medium text-gray-700\">\n                          {user?.firstName} {user?.lastName}\n                        </p>\n                        <div className=\"flex items-center space-x-1\">\n                          <span className=\"text-xs text-yellow-500\">⭐</span>\n                          <span className=\"text-xs text-gray-500\">{user?.rating || \"0.0\"}</span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <div className=\"px-2 py-1.5\">\n                    <p className=\"text-sm font-medium\">{user?.firstName} {user?.lastName}</p>\n                    <p className=\"text-xs text-gray-500\">{user?.email}</p>\n                  </div>\n                  <DropdownMenuSeparator />\n                  \n                  <Link href=\"/profile\">\n                    <DropdownMenuItem className=\"cursor-pointer\">\n                      <UserIcon className=\"w-4 h-4 mr-2\" />\n                      Profile\n                    </DropdownMenuItem>\n                  </Link>\n                  \n                  <Link href=\"/history\">\n                    <DropdownMenuItem className=\"cursor-pointer\">\n                      <History className=\"w-4 h-4 mr-2\" />\n                      Ride History\n                    </DropdownMenuItem>\n                  </Link>\n                  \n                  <Link href=\"/settings\">\n                    <DropdownMenuItem className=\"cursor-pointer\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Settings\n                    </DropdownMenuItem>\n                  </Link>\n                  \n                  <DropdownMenuSeparator />\n                  \n                  <DropdownMenuItem \n                    className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                    onClick={() => window.location.href = '/api/logout'}\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Mobile Bottom Navigation */}\n      {isMobile && (\n        <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 z-50\">\n          <div className=\"flex justify-around\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.path;\n              return (\n                <Link key={item.path} href={item.path}>\n                  <div className={`flex flex-col items-center py-2 px-3 rounded-lg transition-colors cursor-pointer ${\n                    isActive \n                      ? 'text-sky-600' \n                      : 'text-gray-400 hover:text-sky-600'\n                  }`}>\n                    <Icon className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">{item.label}</span>\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":13797},"client/src/components/ride-card.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport UserProfileModal from \"./user-profile-modal\";\nimport { \n  MapPin, \n  Clock, \n  Users, \n  Car, \n  Star, \n  Shield,\n  MessageCircle,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\nimport type { RideWithDetails } from \"@shared/schema\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface RideCardProps {\n  ride: RideWithDetails;\n  mode: \"driver\" | \"passenger\";\n}\n\n// Default props validation\nconst defaultProps = {\n  mode: \"passenger\" as const,\n};\n\nexport default function RideCard({ ride, mode = defaultProps.mode }: RideCardProps) {\n  // Validate required props\n  if (!ride || !ride.id) {\n    console.warn('RideCard: Invalid ride prop provided');\n    return null;\n  }\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showProfileModal, setShowProfileModal] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case \"completed\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">Completed</Badge>;\n      case \"cancelled\":\n        return <Badge className=\"bg-red-100 text-red-800\">Cancelled</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      case \"accepted\":\n        return <Badge className=\"bg-green-100 text-green-800\">Accepted</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-100 text-red-800\">Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Request ride mutation\n  const requestRideMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/ride-requests\", {\n        rideId: ride.id,\n        seatsRequested: 1,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Ride request sent successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides/search\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to send ride request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Accept/reject request mutations\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ requestId, status }: { requestId: string; status: string }) => {\n      return await apiRequest(\"PUT\", `/api/ride-requests/${requestId}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Request updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      const errorMessage = error instanceof Error ? error.message : \"Failed to update request. Please try again.\";\n      toast({\n        title: \"Error\",\n        description: errorMessage.includes(\"Failed to update request\") ? errorMessage : `Failed to update request: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRequestRide = () => {\n    requestRideMutation.mutate();\n  };\n\n  const handleAcceptRequest = (requestId: string) => {\n    updateRequestMutation.mutate({ requestId, status: \"accepted\" });\n  };\n\n  const handleRejectRequest = (requestId: string) => {\n    updateRequestMutation.mutate({ requestId, status: \"rejected\" });\n  };\n\n  const handleShowProfile = (user: any) => {\n    setSelectedUser(user);\n    setShowProfileModal(true);\n  };\n\n  const pendingRequests = ride.requests?.filter(req => req.status === \"pending\") || [];\n  const acceptedRequests = ride.requests?.filter(req => req.status === \"accepted\") || [];\n\n  return (\n    <>\n      <Card className=\"hover:shadow-md transition-shadow border-l-4 border-sky-500\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row md:items-center justify-between\">\n            <div className=\"flex-1\">\n              {/* Driver Info */}\n              <div className=\"flex items-center space-x-4 mb-3\">\n                <Avatar\n                  className=\"w-12 h-12 cursor-pointer border-2 border-sky-500\"\n                  onClick={() => handleShowProfile(ride.driver)}\n                >\n                  <AvatarImage src={ride.driver.profileImageUrl || \"\"} />\n                  <AvatarFallback>\n                    {ride.driver.firstName?.[0]}{ride.driver.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h4 \n                    className=\"font-semibold text-gray-800 cursor-pointer hover:text-sky-600\"\n                    onClick={() => handleShowProfile(ride.driver)}\n                  >\n                    {ride.driver.firstName} {ride.driver.lastName}\n                  </h4>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                      <span className=\"text-sm\">{ride.driver.rating || \"0.0\"}</span>\n                    </div>\n                    <span className=\"text-gray-500 text-sm\">({ride.driver.totalRides || 0} rides)</span>\n                    {ride.driver.isVerified && (\n                      <div className=\"flex items-center space-x-1 text-green-600\">\n                        <Shield className=\"w-3 h-3\" />\n                        <span className=\"text-xs\">Verified</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Route Info */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-3\">\n                <div>\n                  <div className=\"flex items-center text-gray-600 mb-1\">\n                    <MapPin className=\"w-4 h-4 text-sky-500 mr-2\" />\n                    <span className=\"text-sm\">{ride.origin} → {ride.destination}</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Clock className=\"w-4 h-4 text-sky-500 mr-2\" />\n                    <span className=\"text-sm\">{formatDate(ride.departureDate.toString())}</span>\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center text-gray-600 mb-1\">\n                    <Car className=\"w-4 h-4 text-sky-500 mr-2\" />\n                    <span className=\"text-sm\">\n                      {ride.vehicle.year} {ride.vehicle.make} {ride.vehicle.model} - {ride.vehicle.color}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Users className=\"w-4 h-4 text-sky-500 mr-2\" />\n                    <span className=\"text-sm\">{ride.availableSeats} of {ride.vehicle.seats} seats available</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Status and Notes */}\n              <div className=\"flex items-center space-x-2 mb-2\">\n                {getStatusBadge(ride.status)}\n                {acceptedRequests.length > 0 && (\n                  <Badge variant=\"outline\">\n                    {acceptedRequests.length} passenger{acceptedRequests.length > 1 ? 's' : ''} booked\n                  </Badge>\n                )}\n              </div>\n\n              {ride.notes && (\n                <p className=\"text-sm text-gray-600 italic mb-3\">\"{ride.notes}\"</p>\n              )}\n            </div>\n\n            {/* Price and Actions */}\n            <div className=\"flex flex-col items-end space-y-3 mt-4 md:mt-0\">\n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold text-sky-600\">${ride.pricePerSeat}</div>\n                <div className=\"text-sm text-gray-500\">per person</div>\n              </div>\n\n              {mode === \"passenger\" && ride.status === \"active\" && (\n                <Button \n                  onClick={handleRequestRide}\n                  className=\"bg-sky-500 hover:bg-sky-600\"\n                  disabled={requestRideMutation.isPending}\n                >\n                  {requestRideMutation.isPending ? \"Requesting...\" : \"Request Ride\"}\n                </Button>\n              )}\n\n              {mode === \"driver\" && (\n                <div className=\"flex space-x-2\">\n                  <Button \n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex items-center space-x-1\"\n                  >\n                    <MessageCircle className=\"w-4 h-4\" />\n                    <span>Messages</span>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Pending Requests (Driver View) */}\n          {mode === \"driver\" && pendingRequests.length > 0 && (\n            <div className=\"mt-6 pt-4 border-t border-gray-200\">\n              <h5 className=\"font-medium text-gray-800 mb-3\">Pending Requests</h5>\n              <div className=\"space-y-3\">\n                {pendingRequests.map((request) => (\n                  <div key={request.id} className=\"flex items-center justify-between p-3 bg-sky-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar\n                        className=\"w-8 h-8 cursor-pointer\"\n                        onClick={() => handleShowProfile(request.passenger)}\n                      >\n                        <AvatarImage src={request.passenger.profileImageUrl || \"\"} />\n                        <AvatarFallback className=\"text-xs\">\n                          {request.passenger.firstName?.[0]}{request.passenger.lastName?.[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p \n                          className=\"font-medium text-sm cursor-pointer hover:text-sky-600\"\n                          onClick={() => handleShowProfile(request.passenger)}\n                        >\n                          {request.passenger.firstName} {request.passenger.lastName}\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Star className=\"w-3 h-3 text-yellow-500 fill-current\" />\n                          <span className=\"text-xs text-gray-600\">\n                            {request.passenger.rating || \"0.0\"} ({request.passenger.totalRides || 0} rides)\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleAcceptRequest(request.id)}\n                        className=\"bg-green-500 hover:bg-green-600 text-white\"\n                        disabled={updateRequestMutation.isPending}\n                      >\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Accept\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleRejectRequest(request.id)}\n                        className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                        disabled={updateRequestMutation.isPending}\n                      >\n                        <XCircle className=\"w-3 h-3 mr-1\" />\n                        Decline\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Accepted Passengers (Driver View) */}\n          {mode === \"driver\" && acceptedRequests.length > 0 && (\n            <div className=\"mt-6 pt-4 border-t border-gray-200\">\n              <h5 className=\"font-medium text-gray-800 mb-3\">Confirmed Passengers</h5>\n              <div className=\"space-y-2\">\n                {acceptedRequests.map((request) => (\n                  <div key={request.id} className=\"flex items-center space-x-3 p-2\">\n                    <Avatar\n                      className=\"w-6 h-6 cursor-pointer\"\n                      onClick={() => handleShowProfile(request.passenger)}\n                    >\n                      <AvatarImage src={request.passenger.profileImageUrl || \"\"} />\n                      <AvatarFallback className=\"text-xs\">\n                        {request.passenger.firstName?.[0]}{request.passenger.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span \n                      className=\"text-sm cursor-pointer hover:text-sky-600\"\n                      onClick={() => handleShowProfile(request.passenger)}\n                    >\n                      {request.passenger.firstName} {request.passenger.lastName}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      ({request.seatsRequested} seat{request.seatsRequested > 1 ? 's' : ''})\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* User Profile Modal */}\n      {showProfileModal && selectedUser && (\n        <UserProfileModal\n          user={selectedUser}\n          isOpen={showProfileModal}\n          onClose={() => setShowProfileModal(false)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":14978},"client/src/components/ride-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertRideSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { MapPin, Calendar, Clock, Users, DollarSign, Car } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst rideFormSchema = z.object({\n  origin: z.string().min(1, \"Origin is required\"),\n  destination: z.string().min(1, \"Destination is required\"),\n  departureDate: z.string().min(1, \"Departure date is required\"),\n  departureTime: z.string().min(1, \"Departure time is required\"),\n  availableSeats: z.number().min(1, \"At least 1 seat required\"),\n  pricePerSeat: z.string().min(1, \"Price is required\"),\n  vehicleId: z.string().min(1, \"Vehicle is required\"),\n  notes: z.string().optional(),\n});\n\ntype RideFormData = z.infer<typeof rideFormSchema>;\n\nexport default function RideForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RideFormData>({\n    resolver: zodResolver(rideFormSchema),\n    defaultValues: {\n      origin: \"\",\n      destination: \"\",\n      departureDate: \"\",\n      departureTime: \"\",\n      availableSeats: 1,\n      pricePerSeat: \"\",\n      vehicleId: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Fetch user vehicles\n  const { data: vehicles = [], isLoading: isLoadingVehicles } = useQuery<any[]>({\n    queryKey: [\"/api/vehicles\"],\n  });\n\n  // Create ride mutation\n  const createRideMutation = useMutation({\n    mutationFn: async (data: RideFormData) => {\n      // Combine date and time into a single datetime\n      const departureDateTime = new Date(`${data.departureDate}T${data.departureTime}`);\n      \n      const rideData = {\n        ...data,\n        departureDate: departureDateTime.toISOString(),\n        pricePerSeat: parseFloat(data.pricePerSeat),\n      };\n      \n      // Remove the separate time field\n      const { departureTime, ...finalData } = rideData;\n      \n      return await apiRequest(\"POST\", \"/api/rides\", finalData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Ride created successfully!\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      const errorMessage = error instanceof Error ? error.message : \"Failed to create ride. Please try again.\";\n      toast({\n        title: \"Error\",\n        description: errorMessage.includes(\"Failed to create ride\") ? errorMessage : `Failed to create ride: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RideFormData) => {\n    // Additional validation before submission\n    if (!data.origin?.trim() || !data.destination?.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please provide both pickup and destination locations.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!data.departureDate || !data.departureTime) {\n      toast({\n        title: \"Validation Error\", \n        description: \"Please select both departure date and time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Check if departure time is in the future\n    const departureDateTime = new Date(`${data.departureDate}T${data.departureTime}`);\n    if (departureDateTime <= new Date()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Departure time must be in the future.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createRideMutation.mutate(data);\n  };\n\n  // Get today's date for min date validation (local timezone aware)\n  const today = new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000).toISOString().split('T')[0];\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Route Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"origin\" className=\"flex items-center space-x-2\">\n            <MapPin className=\"w-4 h-4 text-sky-500\" />\n            <span>From</span>\n          </Label>\n          <Input\n            id=\"origin\"\n            placeholder=\"Departure location\"\n            {...form.register(\"origin\")}\n            className=\"focus:ring-sky-500 focus:border-sky-500\"\n          />\n          {form.formState.errors.origin && (\n            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.origin.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"destination\" className=\"flex items-center space-x-2\">\n            <MapPin className=\"w-4 h-4 text-red-500\" />\n            <span>To</span>\n          </Label>\n          <Input\n            id=\"destination\"\n            placeholder=\"Destination\"\n            {...form.register(\"destination\")}\n            className=\"focus:ring-sky-500 focus:border-sky-500\"\n          />\n          {form.formState.errors.destination && (\n            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.destination.message}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Date and Time */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div>\n          <Label htmlFor=\"departureDate\" className=\"flex items-center space-x-2\">\n            <Calendar className=\"w-4 h-4 text-sky-500\" />\n            <span>Date</span>\n          </Label>\n          <Input\n            id=\"departureDate\"\n            type=\"date\"\n            min={today}\n            {...form.register(\"departureDate\")}\n            className=\"focus:ring-sky-500 focus:border-sky-500\"\n          />\n          {form.formState.errors.departureDate && (\n            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.departureDate.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"departureTime\" className=\"flex items-center space-x-2\">\n            <Clock className=\"w-4 h-4 text-sky-500\" />\n            <span>Departure Time</span>\n          </Label>\n          <Input\n            id=\"departureTime\"\n            type=\"time\"\n            {...form.register(\"departureTime\")}\n            className=\"focus:ring-sky-500 focus:border-sky-500\"\n          />\n          {form.formState.errors.departureTime && (\n            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.departureTime.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"availableSeats\" className=\"flex items-center space-x-2\">\n            <Users className=\"w-4 h-4 text-sky-500\" />\n            <span>Available Seats</span>\n          </Label>\n          <Select \n            value={form.watch(\"availableSeats\")?.toString()} \n            onValueChange={(value) => form.setValue(\"availableSeats\", parseInt(value))}\n          >\n            <SelectTrigger className=\"focus:ring-sky-500 focus:border-sky-500\">\n              <SelectValue placeholder=\"Select seats\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"1\">1 seat</SelectItem>\n              <SelectItem value=\"2\">2 seats</SelectItem>\n              <SelectItem value=\"3\">3 seats</SelectItem>\n              <SelectItem value=\"4\">4 seats</SelectItem>\n              <SelectItem value=\"5\">5 seats</SelectItem>\n              <SelectItem value=\"6\">6 seats</SelectItem>\n              <SelectItem value=\"7\">7 seats</SelectItem>\n            </SelectContent>\n          </Select>\n          {form.formState.errors.availableSeats && (\n            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.availableSeats.message}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Price and Vehicle */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"pricePerSeat\" className=\"flex items-center space-x-2\">\n            <DollarSign className=\"w-4 h-4 text-sky-500\" />\n            <span>Price per Seat</span>\n          </Label>\n          <Input\n            id=\"pricePerSeat\"\n            type=\"number\"\n            step=\"0.01\"\n            min=\"0\"\n            placeholder=\"0.00\"\n            {...form.register(\"pricePerSeat\")}\n            className=\"focus:ring-sky-500 focus:border-sky-500\"\n          />\n          {form.formState.errors.pricePerSeat && (\n            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.pricePerSeat.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"vehicleId\" className=\"flex items-center space-x-2\">\n            <Car className=\"w-4 h-4 text-sky-500\" />\n            <span>Vehicle</span>\n          </Label>\n          {isLoadingVehicles ? (\n            <div className=\"flex items-center justify-center py-2\">\n              <div className=\"animate-spin w-4 h-4 border-2 border-sky-500 border-t-transparent rounded-full\" />\n            </div>\n          ) : (vehicles as any[]).length === 0 ? (\n            <div className=\"p-3 border rounded-lg text-center text-gray-500\">\n              <p className=\"text-sm\">No vehicles found.</p>\n              <p className=\"text-xs\">Add a vehicle in your profile first.</p>\n            </div>\n          ) : (\n            <Select \n              value={form.watch(\"vehicleId\")} \n              onValueChange={(value) => form.setValue(\"vehicleId\", value)}\n            >\n              <SelectTrigger className=\"focus:ring-sky-500 focus:border-sky-500\">\n                <SelectValue placeholder=\"Select your vehicle\" />\n              </SelectTrigger>\n              <SelectContent>\n                {(vehicles as any[]).map((vehicle: any) => (\n                  <SelectItem key={vehicle.id} value={vehicle.id}>\n                    {vehicle.year} {vehicle.make} {vehicle.model} - {vehicle.color} ({vehicle.licensePlate})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          )}\n          {form.formState.errors.vehicleId && (\n            <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.vehicleId.message}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Additional Notes */}\n      <div>\n        <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n        <Textarea\n          id=\"notes\"\n          rows={3}\n          placeholder=\"Any special instructions, preferences, or additional information...\"\n          {...form.register(\"notes\")}\n          className=\"focus:ring-sky-500 focus:border-sky-500\"\n        />\n      </div>\n\n      {/* Submit Button */}\n      <Button \n        type=\"submit\" \n        className=\"w-full bg-sky-500 hover:bg-sky-600 text-white font-semibold py-3\"\n        disabled={createRideMutation.isPending || (vehicles as any[]).length === 0}\n      >\n        {createRideMutation.isPending ? (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n            <span>Creating Ride...</span>\n          </div>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <span>Create Ride</span>\n          </div>\n        )}\n      </Button>\n\n      {(vehicles as any[]).length === 0 && (\n        <p className=\"text-sm text-gray-600 text-center\">\n          You need to add a vehicle in your profile before creating rides.\n        </p>\n      )}\n    </form>\n  );\n}\n","size_bytes":12119},"client/src/components/user-profile-modal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star, Shield, Phone, MessageCircle, Share, Car } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { User } from \"@shared/schema\";\n\ninterface UserProfileModalProps {\n  user: User;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function UserProfileModal({ user, isOpen, onClose }: UserProfileModalProps) {\n  // Validate required props\n  if (!user || !user.id) {\n    console.warn('UserProfileModal: Invalid user prop provided');\n    return null;\n  }\n  const { toast } = useToast();\n\n  // Fetch user reviews\n  const { data: reviews = [], isLoading: isLoadingReviews } = useQuery<any[]>({\n    queryKey: [\"/api/reviews\", user.id],\n    enabled: isOpen && !!user.id,\n  });\n\n  const handleMessage = () => {\n    toast({\n      title: \"Coming Soon\",\n      description: \"In-app messaging will be available soon!\",\n    });\n  };\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: `${user.firstName} ${user.lastName} - One Route Profile`,\n        text: `Check out ${user.firstName}'s profile on One Route`,\n        url: window.location.href,\n      });\n    } else {\n      navigator.clipboard.writeText(window.location.href);\n      toast({\n        title: \"Link Copied\",\n        description: \"Profile link copied to clipboard!\",\n      });\n    }\n  };\n\n  const averageRating = user.rating ? parseFloat(user.rating) : 0;\n  const totalRides = user.totalRides || 0;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Profile Details</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Profile Header */}\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"w-20 h-20 border-4 border-sky-500\">\n              <AvatarImage src={user.profileImageUrl || \"\"} />\n              <AvatarFallback className=\"text-xl\">\n                {user.firstName?.[0]}{user.lastName?.[0]}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-semibold text-gray-800\">\n                {user.firstName} {user.lastName}\n              </h3>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <div className=\"flex items-center space-x-1\">\n                  <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                  <span className=\"font-medium\">{averageRating.toFixed(1)}</span>\n                </div>\n                <span className=\"text-gray-600\">({totalRides} rides)</span>\n              </div>\n              <div className=\"flex space-x-2 mt-2\">\n                {user.isVerified && (\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    <Shield className=\"w-3 h-3 mr-1\" />\n                    ID Verified\n                  </Badge>\n                )}\n                {user.phone && (\n                  <Badge className=\"bg-blue-100 text-blue-800\">\n                    <Phone className=\"w-3 h-3 mr-1\" />\n                    Phone Verified\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Contact Information */}\n          {(user.age || user.gender || user.address) && (\n            <Card>\n              <CardContent className=\"pt-4\">\n                <h4 className=\"font-medium text-gray-700 mb-3\">About</h4>\n                <div className=\"space-y-2 text-sm\">\n                  {user.age && (\n                    <p><span className=\"text-gray-600\">Age:</span> {user.age}</p>\n                  )}\n                  {user.gender && (\n                    <p><span className=\"text-gray-600\">Gender:</span> {user.gender}</p>\n                  )}\n                  {user.address && (\n                    <p><span className=\"text-gray-600\">Location:</span> {user.address}</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Recent Reviews */}\n          <Card>\n            <CardContent className=\"pt-4\">\n              <h4 className=\"font-medium text-gray-700 mb-3\">Recent Reviews</h4>\n              {isLoadingReviews ? (\n                <div className=\"flex justify-center py-4\">\n                  <div className=\"animate-spin w-5 h-5 border-2 border-sky-500 border-t-transparent rounded-full\" />\n                </div>\n              ) : reviews.length === 0 ? (\n                <p className=\"text-gray-500 text-sm text-center py-4\">\n                  No reviews yet\n                </p>\n              ) : (\n                <div className=\"space-y-3 max-h-32 overflow-y-auto\">\n                  {reviews.slice(0, 3).map((review: any) => (\n                    <div key={review.id} className=\"p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex items-center space-x-1\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`w-3 h-3 ${\n                                i < review.rating \n                                  ? 'text-yellow-500 fill-current' \n                                  : 'text-gray-300'\n                              }`}\n                            />\n                          ))}\n                        </div>\n                        <span className=\"text-xs text-gray-500\">\n                          {new Date(review.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                      {review.comment && (\n                        <p className=\"text-xs text-gray-600 line-clamp-2\">\n                          {review.comment}\n                        </p>\n                      )}\n                    </div>\n                  ))}\n                  {reviews.length > 3 && (\n                    <p className=\"text-xs text-sky-600 text-center\">\n                      +{reviews.length - 3} more reviews\n                    </p>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Rating Breakdown */}\n          {reviews.length > 0 && (\n            <Card>\n              <CardContent className=\"pt-4\">\n                <h4 className=\"font-medium text-gray-700 mb-3\">Rating Breakdown</h4>\n                <div className=\"space-y-2\">\n                  {[5, 4, 3, 2, 1].map((rating) => {\n                    const count = reviews.filter((r: any) => r.rating === rating).length;\n                    const percentage = reviews.length > 0 ? (count / reviews.length) * 100 : 0;\n                    \n                    return (\n                      <div key={rating} className=\"flex items-center space-x-2\">\n                        <div className=\"flex items-center space-x-1 w-12\">\n                          <span className=\"text-sm\">{rating}</span>\n                          <Star className=\"w-3 h-3 text-yellow-500 fill-current\" />\n                        </div>\n                        <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-yellow-500 h-2 rounded-full\"\n                            style={{ width: `${percentage}%` }}\n                          />\n                        </div>\n                        <span className=\"text-xs text-gray-600 w-8\">{count}</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <Button \n              onClick={handleMessage}\n              className=\"flex-1 bg-sky-500 hover:bg-sky-600\"\n            >\n              <MessageCircle className=\"w-4 h-4 mr-2\" />\n              Message\n            </Button>\n            <Button \n              onClick={handleShare}\n              variant=\"outline\"\n              className=\"flex-1\"\n            >\n              <Share className=\"w-4 h-4 mr-2\" />\n              Share Profile\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8690},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}\n","size_bytes":275},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      const text = await res.text();\n      const errorMessage = text || res.statusText || 'Unknown error';\n      throw new Error(`${res.status}: ${errorMessage}`);\n    } catch (parseError) {\n      throw new Error(`${res.status}: ${res.statusText || 'Request failed'}`);\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    try {\n      // Handle queryKey properly - only join strings, convert objects to query params\n      let url = queryKey[0] as string;\n      if (queryKey.length > 1) {\n        const params = new URLSearchParams();\n        for (let i = 1; i < queryKey.length; i++) {\n          const param = queryKey[i];\n          if (typeof param === 'object' && param !== null) {\n            // Convert object to query parameters\n            Object.entries(param).forEach(([key, value]) => {\n              if (value !== undefined && value !== null) {\n                params.append(key, String(value));\n              }\n            });\n          } else {\n            // If it's a simple value, treat it as an ID\n            url = `${url}/${param}`;\n          }\n        }\n        if (params.toString()) {\n          url = `${url}?${params.toString()}`;\n        }\n      }\n      \n      const res = await fetch(url, {\n        credentials: \"include\",\n      });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n      await throwIfResNotOk(res);\n      return await res.json();\n    } catch (error) {\n      // In development, log errors for debugging\n      if (import.meta.env.DEV) {\n        console.error('Query fetch error:', error);\n      }\n      throw error;\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2601},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navigation from \"@/components/navigation\";\nimport RideCard from \"@/components/ride-card\";\nimport RideForm from \"@/components/ride-form\";\nimport { Search, Plus } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect } from \"react\";\nimport type { RideWithDetails } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"passenger\");\n  const [searchFilters, setSearchFilters] = useState({\n    origin: \"\",\n    destination: \"\",\n    date: \"\",\n    minSeats: \"\"\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Search rides query\n  const { data: searchResults = [], isLoading: isSearching, refetch: searchRides } = useQuery<RideWithDetails[]>({\n    queryKey: [\"/api/rides/search\", searchFilters],\n    enabled: false, // Only search when triggered\n  });\n\n  // User's rides query\n  const { data: userRides = [], isLoading: isLoadingUserRides } = useQuery<RideWithDetails[]>({\n    queryKey: [\"/api/rides\", { type: activeTab === \"driver\" ? \"driver\" : \"passenger\" }],\n    enabled: isAuthenticated,\n  });\n\n  const handleSearch = () => {\n    if (!searchFilters.origin?.trim() || !searchFilters.destination?.trim()) {\n      toast({\n        title: \"Search Error\",\n        description: \"Please enter both pickup and destination locations.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Check if search date is in the future (if provided)\n    if (searchFilters.date) {\n      const searchDate = new Date(searchFilters.date);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      if (searchDate < today) {\n        toast({\n          title: \"Search Error\",\n          description: \"Please select a date that is today or in the future.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    try {\n      searchRides();\n    } catch (error) {\n      toast({\n        title: \"Search Failed\",\n        description: \"Unable to search for rides. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-sky-500 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Mode Toggle */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-center\">\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full max-w-md\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"passenger\" className=\"flex items-center space-x-2\">\n                    <Search className=\"w-4 h-4\" />\n                    <span>Find a Ride</span>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"driver\" className=\"flex items-center space-x-2\">\n                    <Plus className=\"w-4 h-4\" />\n                    <span>Offer a Ride</span>\n                  </TabsTrigger>\n                </TabsList>\n              </Tabs>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          {/* Passenger Mode */}\n          <TabsContent value=\"passenger\" className=\"space-y-6\">\n            {/* Search Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Find Your Perfect Ride</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"origin\">From</Label>\n                    <Input\n                      id=\"origin\"\n                      placeholder=\"Enter pickup location\"\n                      value={searchFilters.origin}\n                      onChange={(e) => setSearchFilters(prev => ({ ...prev, origin: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"destination\">To</Label>\n                    <Input\n                      id=\"destination\"\n                      placeholder=\"Enter destination\"\n                      value={searchFilters.destination}\n                      onChange={(e) => setSearchFilters(prev => ({ ...prev, destination: e.target.value }))}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"date\">Date</Label>\n                    <Input\n                      id=\"date\"\n                      type=\"date\"\n                      value={searchFilters.date}\n                      min={new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000).toISOString().split('T')[0]}\n                      onChange={(e) => setSearchFilters(prev => ({ ...prev, date: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"minSeats\">Passengers</Label>\n                    <Select value={searchFilters.minSeats} onValueChange={(value) => setSearchFilters(prev => ({ ...prev, minSeats: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Number of passengers\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">1 passenger</SelectItem>\n                        <SelectItem value=\"2\">2 passengers</SelectItem>\n                        <SelectItem value=\"3\">3 passengers</SelectItem>\n                        <SelectItem value=\"4\">4 passengers</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex items-end\">\n                    <Button \n                      onClick={handleSearch} \n                      className=\"w-full bg-sky-500 hover:bg-sky-600\"\n                      disabled={isSearching || !searchFilters.origin || !searchFilters.destination}\n                    >\n                      {isSearching ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n                          <span>Searching...</span>\n                        </div>\n                      ) : (\n                        \"Search Rides\"\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Search Results */}\n            {isSearching && (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-sky-500 border-t-transparent rounded-full mx-auto mb-4\" />\n                <p className=\"text-gray-600\">Searching for rides...</p>\n              </div>\n            )}\n            \n            {!isSearching && searchResults.length > 0 && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Available Rides</h3>\n                {searchResults.map((ride: RideWithDetails) => (\n                  <RideCard key={ride.id} ride={ride} mode=\"passenger\" />\n                ))}\n              </div>\n            )}\n\n            {/* User's Ride Requests */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-gray-800\">Your Ride Requests</h3>\n              {isLoadingUserRides ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin w-6 h-6 border-4 border-sky-500 border-t-transparent rounded-full\" />\n                </div>\n              ) : userRides.length === 0 ? (\n                <Card>\n                  <CardContent className=\"py-8 text-center text-gray-500\">\n                    No ride requests found. Search for rides above to get started!\n                  </CardContent>\n                </Card>\n              ) : (\n                userRides.map((ride: RideWithDetails) => (\n                  <RideCard key={ride.id} ride={ride} mode=\"passenger\" />\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Driver Mode */}\n          <TabsContent value=\"driver\" className=\"space-y-6\">\n            {/* Create Ride Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Create a New Ride</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <RideForm />\n              </CardContent>\n            </Card>\n\n            {/* Driver's Rides */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-gray-800\">Your Rides</h3>\n              {isLoadingUserRides ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin w-6 h-6 border-4 border-sky-500 border-t-transparent rounded-full\" />\n                </div>\n              ) : userRides.length === 0 ? (\n                <Card>\n                  <CardContent className=\"py-8 text-center text-gray-500\">\n                    No rides created yet. Create your first ride above!\n                  </CardContent>\n                </Card>\n              ) : (\n                userRides.map((ride: RideWithDetails) => (\n                  <RideCard key={ride.id} ride={ride} mode=\"driver\" />\n                ))\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10962},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Car, Users, Shield, Star } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-sky-50 to-white\">\n      {/* Header */}\n      <header className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src=\"/one-route-logo.png\" \n              alt=\"One Route Logo\" \n              className=\"h-10 w-10\"\n            />\n            <h1 className=\"text-3xl font-bold text-sky-600\">One Route</h1>\n          </div>\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            className=\"bg-sky-500 hover:bg-sky-600 text-white\"\n          >\n            Sign In\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-4 py-20 text-center\">\n        <div className=\"flex justify-center mb-8\">\n          <img \n            src=\"/one-route-logo.png\" \n            alt=\"One Route Logo\" \n            className=\"h-32 w-32\"\n          />\n        </div>\n        <h2 className=\"text-5xl font-bold text-gray-800 mb-6\">\n          Share the Journey, <span className=\"text-sky-500\">Share the Cost</span>\n        </h2>\n        <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n          Connect with fellow travelers and make your commute more affordable, social, and eco-friendly.\n        </p>\n        <Button \n          size=\"lg\"\n          onClick={() => window.location.href = '/api/login'}\n          className=\"bg-sky-500 hover:bg-sky-600 text-white text-lg px-8 py-4\"\n        >\n          Get Started Today\n        </Button>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-8\">\n              <Car className=\"w-12 h-12 text-sky-500 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Easy Ride Sharing</h3>\n              <p className=\"text-gray-600\">\n                Create or find rides with just a few clicks. Simple, fast, and reliable.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-8\">\n              <Users className=\"w-12 h-12 text-sky-500 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Trusted Community</h3>\n              <p className=\"text-gray-600\">\n                All users are verified with ratings and reviews for your peace of mind.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-8\">\n              <Shield className=\"w-12 h-12 text-sky-500 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Safe & Secure</h3>\n              <p className=\"text-gray-600\">\n                Advanced safety features including GPS tracking and emergency support.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"bg-sky-50 py-16\">\n        <div className=\"container mx-auto px-4\">\n          <h3 className=\"text-3xl font-bold text-center text-gray-800 mb-12\">\n            What Our Users Say\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                </div>\n                <p className=\"text-gray-600 mb-4\">\n                  \"One Route has transformed my daily commute. I've met great people and saved money!\"\n                </p>\n                <p className=\"font-semibold\">- Sarah Johnson</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                </div>\n                <p className=\"text-gray-600 mb-4\">\n                  \"Safe, reliable, and eco-friendly. The verification process gives me confidence.\"\n                </p>\n                <p className=\"font-semibold\">- Michael Chen</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                </div>\n                <p className=\"text-gray-600 mb-4\">\n                  \"As a driver, I love sharing costs and meeting new people on long trips.\"\n                </p>\n                <p className=\"font-semibold\">- Emma Rodriguez</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"container mx-auto px-4 py-20 text-center\">\n        <h3 className=\"text-3xl font-bold text-gray-800 mb-6\">\n          Ready to Start Your Journey?\n        </h3>\n        <p className=\"text-xl text-gray-600 mb-8\">\n          Join thousands of users who are already saving money and making connections.\n        </p>\n        <Button \n          size=\"lg\"\n          onClick={() => window.location.href = '/api/login'}\n          className=\"bg-sky-500 hover:bg-sky-600 text-white text-lg px-8 py-4\"\n        >\n          Sign Up Now\n        </Button>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <p>&copy; 2024 One Route. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6974},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, insertVehicleSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { User, Car, Star, Shield, Phone } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect } from \"react\";\n\nconst profileSchema = insertUserSchema.extend({\n  phone: z.string().optional(),\n  age: z.number().optional(),\n  gender: z.string().optional(),\n  address: z.string().optional(),\n  paypalEmail: z.string().email().optional().or(z.literal(\"\")),\n});\n\nconst vehicleSchema = z.object({\n  make: z.string().min(1, \"Make is required\"),\n  model: z.string().min(1, \"Model is required\"),\n  year: z.number().min(1900, \"Invalid year\"),\n  color: z.string().min(1, \"Color is required\"),\n  licensePlate: z.string().min(1, \"License plate is required\"),\n});\n\nexport default function Profile() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingProfile, setEditingProfile] = useState(false);\n  const [showAddVehicle, setShowAddVehicle] = useState(false);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Profile form\n  const profileForm = useForm({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      age: undefined,\n      gender: \"\",\n      address: \"\",\n      paypalEmail: \"\",\n    },\n  });\n\n  // Update form values when user data loads\n  useEffect(() => {\n    if (user) {\n      profileForm.reset({\n        firstName: (user as any)?.firstName || \"\",\n        lastName: (user as any)?.lastName || \"\",\n        email: (user as any)?.email || \"\",\n        phone: (user as any)?.phone || \"\",\n        age: (user as any)?.age || undefined,\n        gender: (user as any)?.gender || \"\",\n        paypalEmail: (user as any)?.paypalEmail || \"\",\n        address: (user as any)?.address || \"\",\n      });\n    }\n  }, [user, profileForm]);\n\n  // Vehicle form\n  const vehicleForm = useForm({\n    resolver: zodResolver(vehicleSchema),\n    defaultValues: {\n      make: \"\",\n      model: \"\",\n      year: new Date().getFullYear(),\n      color: \"\",\n      licensePlate: \"\",\n      seats: 4,\n    },\n  });\n\n  // Fetch user vehicles\n  const { data: vehicles = [], isLoading: isLoadingVehicles } = useQuery({\n    queryKey: [\"/api/vehicles\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch user reviews\n  const { data: reviews = [], isLoading: isLoadingReviews } = useQuery({\n    queryKey: [\"/api/reviews\", (user as any)?.id],\n    enabled: isAuthenticated && !!(user as any)?.id,\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully!\",\n      });\n      setEditingProfile(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      const errorMessage = error instanceof Error ? error.message : \"Failed to update profile. Please try again.\";\n      toast({\n        title: \"Error\",\n        description: errorMessage.includes(\"Failed to update profile\") ? errorMessage : `Failed to update profile: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add vehicle mutation\n  const addVehicleMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/vehicles\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Vehicle added successfully!\",\n      });\n      setShowAddVehicle(false);\n      vehicleForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/vehicles\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      const errorMessage = error instanceof Error ? error.message : \"Failed to add vehicle. Please try again.\";\n      toast({\n        title: \"Error\",\n        description: errorMessage.includes(\"Failed to add vehicle\") ? errorMessage : `Failed to add vehicle: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitProfile = (data: any) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const onSubmitVehicle = (data: any) => {\n    addVehicleMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-sky-500 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"space-y-6\">\n          {/* Profile Header */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-4 mb-6\">\n                {(user as any)?.profileImageUrl ? (\n                  <img \n                    src={(user as any).profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-20 h-20 rounded-full object-cover border-4 border-sky-500\"\n                  />\n                ) : (\n                  <div className=\"w-20 h-20 rounded-full bg-sky-500 flex items-center justify-center\">\n                    <User className=\"w-8 h-8 text-white\" />\n                  </div>\n                )}\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-800\">\n                    {(user as any)?.firstName} {(user as any)?.lastName}\n                  </h1>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                    <span className=\"text-gray-600\">{(user as any)?.rating || \"0.0\"}</span>\n                    <span className=\"text-gray-500\">({(user as any)?.totalRides || 0} rides)</span>\n                    {(user as any)?.isVerified && (\n                      <div className=\"flex items-center space-x-1 text-green-600\">\n                        <Shield className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">Verified</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                <Button \n                  onClick={() => setEditingProfile(!editingProfile)}\n                  variant={editingProfile ? \"outline\" : \"default\"}\n                  className={!editingProfile ? \"bg-sky-500 hover:bg-sky-600\" : \"\"}\n                >\n                  {editingProfile ? \"Cancel\" : \"Edit Profile\"}\n                </Button>\n                <Button onClick={() => window.location.href = '/api/logout'} variant=\"outline\">\n                  Sign Out\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Form */}\n          {editingProfile && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Edit Profile</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={profileForm.handleSubmit(onSubmitProfile)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...profileForm.register(\"firstName\")}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...profileForm.register(\"lastName\")}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        {...profileForm.register(\"email\")}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone</Label>\n                      <Input\n                        id=\"phone\"\n                        {...profileForm.register(\"phone\")}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"age\">Age</Label>\n                      <Input\n                        id=\"age\"\n                        type=\"number\"\n                        {...profileForm.register(\"age\", { valueAsNumber: true })}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"gender\">Gender</Label>\n                      <Select \n                        value={profileForm.watch(\"gender\")} \n                        onValueChange={(value) => profileForm.setValue(\"gender\", value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select gender\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"male\">Male</SelectItem>\n                          <SelectItem value=\"female\">Female</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                          <SelectItem value=\"prefer-not-to-say\">Prefer not to say</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"address\">Address</Label>\n                    <Textarea\n                      id=\"address\"\n                      {...profileForm.register(\"address\")}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"paypalEmail\">PayPal Email (for receiving payments)</Label>\n                    <Input\n                      id=\"paypalEmail\"\n                      type=\"email\"\n                      {...profileForm.register(\"paypalEmail\")}\n                      placeholder=\"your-email@paypal.com\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Add your PayPal email to receive payments when you offer rides\n                    </p>\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"bg-sky-500 hover:bg-sky-600\"\n                    disabled={updateProfileMutation.isPending}\n                  >\n                    {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Vehicles Section */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Car className=\"w-5 h-5\" />\n                  <span>Your Vehicles</span>\n                </CardTitle>\n                <Button \n                  onClick={() => setShowAddVehicle(!showAddVehicle)}\n                  className=\"bg-sky-500 hover:bg-sky-600\"\n                >\n                  Add Vehicle\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {showAddVehicle && (\n                <form onSubmit={vehicleForm.handleSubmit(onSubmitVehicle)} className=\"space-y-4 mb-6 p-4 border rounded-lg\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"make\">Make</Label>\n                      <Input\n                        id=\"make\"\n                        {...vehicleForm.register(\"make\")}\n                        placeholder=\"Toyota\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"model\">Model</Label>\n                      <Input\n                        id=\"model\"\n                        {...vehicleForm.register(\"model\")}\n                        placeholder=\"Camry\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"year\">Year</Label>\n                      <Input\n                        id=\"year\"\n                        type=\"number\"\n                        {...vehicleForm.register(\"year\", { valueAsNumber: true })}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"color\">Color</Label>\n                      <Input\n                        id=\"color\"\n                        {...vehicleForm.register(\"color\")}\n                        placeholder=\"Blue\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"seats\">Seats</Label>\n                      <Select \n                        value={vehicleForm.watch(\"seats\")?.toString()} \n                        onValueChange={(value) => vehicleForm.setValue(\"seats\", parseInt(value))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"2\">2 seats</SelectItem>\n                          <SelectItem value=\"4\">4 seats</SelectItem>\n                          <SelectItem value=\"5\">5 seats</SelectItem>\n                          <SelectItem value=\"7\">7 seats</SelectItem>\n                          <SelectItem value=\"8\">8 seats</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"licensePlate\">License Plate</Label>\n                    <Input\n                      id=\"licensePlate\"\n                      {...vehicleForm.register(\"licensePlate\")}\n                      placeholder=\"ABC123\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button \n                      type=\"submit\" \n                      className=\"bg-sky-500 hover:bg-sky-600\"\n                      disabled={addVehicleMutation.isPending}\n                    >\n                      {addVehicleMutation.isPending ? \"Adding...\" : \"Add Vehicle\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={() => setShowAddVehicle(false)}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              )}\n\n              {isLoadingVehicles ? (\n                <div className=\"flex justify-center py-4\">\n                  <div className=\"animate-spin w-6 h-6 border-4 border-sky-500 border-t-transparent rounded-full\" />\n                </div>\n              ) : (vehicles as any[]).length === 0 ? (\n                <p className=\"text-gray-500 text-center py-4\">\n                  No vehicles added yet. Add your first vehicle to start offering rides!\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {(vehicles as any[]).map((vehicle: any) => (\n                    <div key={vehicle.id} className=\"p-4 border rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">\n                            {vehicle.year} {vehicle.make} {vehicle.model}\n                          </h4>\n                          <p className=\"text-sm text-gray-600\">\n                            {vehicle.color} • {vehicle.licensePlate} • {vehicle.seats} seats\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Reviews Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Reviews</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingReviews ? (\n                <div className=\"flex justify-center py-4\">\n                  <div className=\"animate-spin w-6 h-6 border-4 border-sky-500 border-t-transparent rounded-full\" />\n                </div>\n              ) : (reviews as any[]).length === 0 ? (\n                <p className=\"text-gray-500 text-center py-4\">\n                  No reviews yet. Complete rides to start receiving reviews!\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {(reviews as any[]).map((review: any) => (\n                    <div key={review.id} className=\"p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <div className=\"flex items-center\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star \n                              key={i} \n                              className={`w-4 h-4 ${i < review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'}`} \n                            />\n                          ))}\n                        </div>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(review.createdAt).toLocaleDateString('en-US', {\n                            year: 'numeric',\n                            month: 'short',\n                            day: 'numeric'\n                          })}\n                        </span>\n                      </div>\n                      {review.comment && (\n                        <p className=\"text-gray-700\">{review.comment}</p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20589},"client/src/pages/ride-history.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navigation from \"@/components/navigation\";\nimport { Calendar, MapPin, Users, DollarSign, CreditCard } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect } from \"react\";\nimport type { RideWithDetails } from \"@shared/schema\";\n\nexport default function RideHistory() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch driver rides\n  const { data: driverRides = [], isLoading: isLoadingDriverRides } = useQuery({\n    queryKey: [\"/api/rides\", { type: \"driver\" }],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch passenger rides\n  const { data: passengerRides = [], isLoading: isLoadingPassengerRides } = useQuery({\n    queryKey: [\"/api/rides\", { type: \"passenger\" }],\n    enabled: isAuthenticated,\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case \"completed\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">Completed</Badge>;\n      case \"cancelled\":\n        return <Badge className=\"bg-red-100 text-red-800\">Cancelled</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      weekday: \"short\",\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const RideCard = ({ ride, type }: { ride: RideWithDetails; type: \"driver\" | \"passenger\" }) => (\n    <Card key={ride.id} className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <MapPin className=\"w-4 h-4 text-sky-500\" />\n              <span className=\"font-medium\">{ride.origin} → {ride.destination}</span>\n              {getStatusBadge(ride.status)}\n            </div>\n            \n            <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-3\">\n              <div className=\"flex items-center space-x-1\">\n                <Calendar className=\"w-4 h-4\" />\n                <span>{ride.departureDate ? formatDate(ride.departureDate.toString()) : 'Date TBD'}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Users className=\"w-4 h-4\" />\n                <span>{ride.availableSeats} seats available</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <DollarSign className=\"w-4 h-4\" />\n                <span>${ride.pricePerSeat}/seat</span>\n              </div>\n            </div>\n\n            {type === \"driver\" ? (\n              <div>\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  Vehicle: {ride.vehicle.year} {ride.vehicle.make} {ride.vehicle.model}\n                </p>\n                {ride.requests.length > 0 && (\n                  <div>\n                    <p className=\"text-sm font-medium mb-1\">Passengers:</p>\n                    <div className=\"space-y-1\">\n                      {ride.requests\n                        .filter(req => req.status === \"accepted\")\n                        .map(req => (\n                          <div key={req.id} className=\"text-sm text-gray-600\">\n                            {req.passenger.firstName} {req.passenger.lastName} ({req.seatsRequested} seat{req.seatsRequested > 1 ? 's' : ''})\n                          </div>\n                        ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div>\n                <p className=\"text-sm text-gray-600\">\n                  Driver: {ride.driver.firstName} {ride.driver.lastName}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  Vehicle: {ride.vehicle.year} {ride.vehicle.make} {ride.vehicle.model}\n                </p>\n              </div>\n            )}\n\n            {ride.notes && (\n              <p className=\"text-sm text-gray-600 mt-2 italic\">\"{ride.notes}\"</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between text-sm text-gray-500\">\n          <span>Created {ride.createdAt ? new Date(ride.createdAt).toLocaleDateString() : 'Unknown'}</span>\n          {type === \"driver\" && (\n            <span>{ride.requests.filter(r => r.status === \"accepted\").length} passengers booked</span>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-sky-500 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-800\">Ride History</h1>\n          <p className=\"text-gray-600\">View all your rides as a driver and passenger</p>\n        </div>\n\n        <Tabs defaultValue=\"driver\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"driver\">As Driver</TabsTrigger>\n            <TabsTrigger value=\"passenger\">As Passenger</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"driver\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Rides You've Offered</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingDriverRides ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin w-6 h-6 border-4 border-sky-500 border-t-transparent rounded-full\" />\n                  </div>\n                ) : (driverRides as RideWithDetails[])?.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <MapPin className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No rides offered yet</p>\n                    <p className=\"text-sm\">Create your first ride to start sharing!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {(driverRides as RideWithDetails[])?.map((ride: RideWithDetails) => (\n                      <RideCard key={ride.id} ride={ride} type=\"driver\" />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"passenger\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Rides You've Requested</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingPassengerRides ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin w-6 h-6 border-4 border-sky-500 border-t-transparent rounded-full\" />\n                  </div>\n                ) : (passengerRides as RideWithDetails[])?.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No ride requests yet</p>\n                    <p className=\"text-sm\">Search for rides to start traveling!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {(passengerRides as RideWithDetails[])?.map((ride: RideWithDetails) => (\n                      <RideCard key={ride.id} ride={ride} type=\"passenger\" />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8924},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin-simple.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/navigation\";\nimport { \n  Users, \n  Car, \n  DollarSign, \n  AlertTriangle, \n  Shield, \n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\n\nexport default function AdminPortal() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [bankSettings, setBankSettings] = useState({\n    bankName: \"\",\n    accountHolderName: \"\",\n    accountNumber: \"\",\n    routingNumber: \"\",\n    serviceFeePercentage: \"5.00\",\n    fixedServiceFee: \"2.00\",\n    payoutSchedule: \"weekly\",\n  });\n  const [isConfigured, setIsConfigured] = useState(false);\n\n  // Check if user is admin - temporarily allow access for testing\n  const isAdmin = true; // Bypass authentication for testing\n\n  const handleSaveBankSettings = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!bankSettings.bankName || !bankSettings.accountHolderName || !bankSettings.accountNumber) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required bank details.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Simulate save\n    setIsConfigured(true);\n    toast({\n      title: \"Bank Settings Saved\",\n      description: \"Your bank details have been configured successfully. The platform is ready for payments!\",\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setBankSettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (!isAdmin) {\n    return (\n      <div>\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"text-center p-8\">\n              <Shield className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Admin Access Required</h2>\n              <p className=\"text-gray-600\">You need admin privileges to access this portal.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Navigation />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Admin Portal</h1>\n          <p className=\"text-gray-600\">Manage your One Route platform</p>\n        </div>\n\n        {/* Bank Setup Required Notice */}\n        {!isConfigured && (\n          <Card className=\"border-orange-200 bg-orange-50 mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n                <div>\n                  <h3 className=\"font-medium text-orange-800\">Bank Setup Required</h3>\n                  <p className=\"text-sm text-orange-700\">\n                    Please configure your bank details in the \"Bank Settings\" tab before going live to receive payments.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <Tabs defaultValue={!isConfigured ? \"settings\" : \"dashboard\"} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"rides\">Rides</TabsTrigger>\n            <TabsTrigger value=\"safety\">Safety</TabsTrigger>\n            <TabsTrigger value=\"settings\">Bank Settings</TabsTrigger>\n          </TabsList>\n\n          {/* Dashboard */}\n          <TabsContent value=\"dashboard\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"w-8 h-8 text-sky-500\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">0</p>\n                      <p className=\"text-gray-600\">Total Users</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <Car className=\"w-8 h-8 text-sky-500\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">0</p>\n                      <p className=\"text-gray-600\">Total Rides</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <DollarSign className=\"w-8 h-8 text-sky-500\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">$0</p>\n                      <p className=\"text-gray-600\">Revenue</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <AlertTriangle className=\"w-8 h-8 text-red-500\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">0</p>\n                      <p className=\"text-gray-600\">Alerts</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Users */}\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">User management features will be displayed here.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Rides */}\n          <TabsContent value=\"rides\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Ride Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">Ride management features will be displayed here.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Safety */}\n          <TabsContent value=\"safety\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Safety & Emergency</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">Safety monitoring features will be displayed here.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Bank Settings */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Bank Account Configuration</CardTitle>\n                <p className=\"text-sm text-gray-600\">\n                  Configure your bank details to receive payments from the platform\n                </p>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSaveBankSettings} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"bankName\">Bank Name *</Label>\n                      <Input\n                        id=\"bankName\"\n                        placeholder=\"e.g., Chase Bank\"\n                        value={bankSettings.bankName}\n                        onChange={(e) => handleInputChange(\"bankName\", e.target.value)}\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"accountHolderName\">Account Holder Name *</Label>\n                      <Input\n                        id=\"accountHolderName\"\n                        placeholder=\"Full name on account\"\n                        value={bankSettings.accountHolderName}\n                        onChange={(e) => handleInputChange(\"accountHolderName\", e.target.value)}\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"accountNumber\">Account Number *</Label>\n                      <Input\n                        id=\"accountNumber\"\n                        placeholder=\"Account number\"\n                        value={bankSettings.accountNumber}\n                        onChange={(e) => handleInputChange(\"accountNumber\", e.target.value)}\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"routingNumber\">Routing Number</Label>\n                      <Input\n                        id=\"routingNumber\"\n                        placeholder=\"9-digit routing number\"\n                        value={bankSettings.routingNumber}\n                        onChange={(e) => handleInputChange(\"routingNumber\", e.target.value)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-6\">\n                    <h3 className=\"text-lg font-medium mb-4\">Service Fee Configuration</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"serviceFeePercentage\">Service Fee (%)</Label>\n                        <Input\n                          id=\"serviceFeePercentage\"\n                          placeholder=\"5.00\"\n                          value={bankSettings.serviceFeePercentage}\n                          onChange={(e) => handleInputChange(\"serviceFeePercentage\", e.target.value)}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"fixedServiceFee\">Fixed Fee ($)</Label>\n                        <Input\n                          id=\"fixedServiceFee\"\n                          placeholder=\"2.00\"\n                          value={bankSettings.fixedServiceFee}\n                          onChange={(e) => handleInputChange(\"fixedServiceFee\", e.target.value)}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"payoutSchedule\">Payout Schedule</Label>\n                        <Select \n                          value={bankSettings.payoutSchedule} \n                          onValueChange={(value) => handleInputChange(\"payoutSchedule\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select schedule\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"daily\">Daily</SelectItem>\n                            <SelectItem value=\"weekly\">Weekly</SelectItem>\n                            <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-sky-500 hover:bg-sky-600\"\n                  >\n                    Save Bank Settings\n                  </Button>\n                </form>\n\n                {isConfigured && (\n                  <Card className=\"mt-6 border-green-200 bg-green-50\">\n                    <CardHeader>\n                      <CardTitle className=\"text-green-700 flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 mr-2\" />\n                        Configuration Complete - Ready for Live Payments\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm mb-4\">\n                        <div>\n                          <Label className=\"text-gray-600\">Bank Name</Label>\n                          <p className=\"font-medium\">{bankSettings.bankName}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-gray-600\">Account Holder</Label>\n                          <p className=\"font-medium\">{bankSettings.accountHolderName}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-gray-600\">Service Fee</Label>\n                          <p className=\"font-medium\">{bankSettings.serviceFeePercentage}% + ${bankSettings.fixedServiceFee}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-gray-600\">Payout Schedule</Label>\n                          <p className=\"font-medium capitalize\">{bankSettings.payoutSchedule}</p>\n                        </div>\n                      </div>\n                      <div className=\"p-3 bg-green-100 rounded-lg\">\n                        <p className=\"text-sm text-green-800\">\n                          Your bank details are configured. The platform is ready to process payments and transfer funds to your account.\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {!isConfigured && (\n                  <Card className=\"mt-6 border-red-200 bg-red-50\">\n                    <CardHeader>\n                      <CardTitle className=\"text-red-700 flex items-center\">\n                        <XCircle className=\"w-5 h-5 mr-2\" />\n                        Setup Required Before Going Live\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"p-3 bg-red-100 rounded-lg\">\n                        <p className=\"text-sm text-red-800\">\n                          Bank details must be configured before the platform can process payments. Users won't be able to complete transactions until this is set up.\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":14986},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { \n  User, \n  Bell, \n  Shield, \n  CreditCard,\n  Smartphone,\n  Mail,\n  Globe,\n  Plus,\n  Trash2,\n  Eye\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [paymentMethods, setPaymentMethods] = useState([\n    { id: 1, type: \"card\", last4: \"4242\", brand: \"Visa\", isDefault: true },\n    { id: 2, type: \"card\", last4: \"5555\", brand: \"Mastercard\", isDefault: false },\n  ]);\n\n  // User profile form\n  const profileForm = useForm({\n    defaultValues: {\n      firstName: (user as any)?.firstName || \"\",\n      lastName: (user as any)?.lastName || \"\",\n      email: (user as any)?.email || \"\",\n      phone: (user as any)?.phone || \"\",\n    },\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"PUT\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitProfile = (data: any) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  // Bypass authentication for testing\n  const allowAccess = true;\n  \n  if (!allowAccess) {\n    return (\n      <div>\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"text-center p-8\">\n              <Shield className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Login Required</h2>\n              <p className=\"text-gray-600\">Please log in to access your settings.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Navigation />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Settings</h1>\n          <p className=\"text-gray-600\">Manage your account settings and preferences</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Profile Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"w-5 h-5 mr-2\" />\n                Profile Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...profileForm}>\n                <form onSubmit={profileForm.handleSubmit(onSubmitProfile)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={profileForm.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"First name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={profileForm.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Last name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={profileForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Email address\" type=\"email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={profileForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Phone number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-sky-500 hover:bg-sky-600\"\n                    disabled={updateProfileMutation.isPending}\n                  >\n                    {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Notification Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"w-5 h-5 mr-2\" />\n                Notifications\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Email Notifications</Label>\n                  <p className=\"text-sm text-gray-600\">Receive ride updates via email</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>SMS Notifications</Label>\n                  <p className=\"text-sm text-gray-600\">Receive ride updates via SMS</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Push Notifications</Label>\n                  <p className=\"text-sm text-gray-600\">Receive push notifications</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Marketing Emails</Label>\n                  <p className=\"text-sm text-gray-600\">Receive promotional emails</p>\n                </div>\n                <Switch />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Privacy Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"w-5 h-5 mr-2\" />\n                Privacy & Safety\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Profile Visibility</Label>\n                  <p className=\"text-sm text-gray-600\">Show your profile to other users</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Location Sharing</Label>\n                  <p className=\"text-sm text-gray-600\">Share location during rides</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Ride History</Label>\n                  <p className=\"text-sm text-gray-600\">Allow others to see your ride history</p>\n                </div>\n                <Switch />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <CreditCard className=\"w-5 h-5 mr-2\" />\n                Account & Billing\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <CreditCard className=\"w-4 h-4 mr-2\" />\n                    Payment Methods\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[500px]\">\n                  <DialogHeader>\n                    <DialogTitle>Payment Methods</DialogTitle>\n                    <DialogDescription>\n                      Manage your payment methods for rides and subscriptions\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <Tabs defaultValue=\"cards\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                      <TabsTrigger value=\"cards\">Cards</TabsTrigger>\n                      <TabsTrigger value=\"add\">Add New</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"cards\" className=\"space-y-4\">\n                      {paymentMethods.length === 0 ? (\n                        <div className=\"text-center py-8\">\n                          <CreditCard className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-600 mb-4\">No payment methods added yet</p>\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => {\n                              // Switch to add tab\n                              const addTab = document.querySelector('[value=\"add\"]') as HTMLElement;\n                              addTab?.click();\n                            }}\n                          >\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Payment Method\n                          </Button>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          {paymentMethods.map((method) => (\n                            <Card key={method.id} className={method.isDefault ? \"border-sky-500 bg-sky-50\" : \"\"}>\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center space-x-3\">\n                                    <CreditCard className=\"w-6 h-6 text-gray-600\" />\n                                    <div>\n                                      <p className=\"font-medium\">\n                                        {method.brand} ending in {method.last4}\n                                      </p>\n                                      {method.isDefault && (\n                                        <p className=\"text-sm text-sky-600\">Default payment method</p>\n                                      )}\n                                    </div>\n                                  </div>\n                                  <div className=\"flex items-center space-x-2\">\n                                    {!method.isDefault && (\n                                      <Button \n                                        variant=\"ghost\" \n                                        size=\"sm\"\n                                        onClick={() => {\n                                          const updated = paymentMethods.map(pm => ({\n                                            ...pm,\n                                            isDefault: pm.id === method.id\n                                          }));\n                                          setPaymentMethods(updated);\n                                          toast({\n                                            title: \"Default Updated\",\n                                            description: `${method.brand} ending in ${method.last4} is now your default payment method.`,\n                                          });\n                                        }}\n                                      >\n                                        Set Default\n                                      </Button>\n                                    )}\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => {\n                                        const updated = paymentMethods.filter(pm => pm.id !== method.id);\n                                        setPaymentMethods(updated);\n                                        toast({\n                                          title: \"Payment Method Removed\",\n                                          description: `${method.brand} ending in ${method.last4} has been removed.`,\n                                        });\n                                      }}\n                                    >\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      )}\n                    </TabsContent>\n                    \n                    <TabsContent value=\"add\" className=\"space-y-4\">\n                      <form \n                        onSubmit={(e) => {\n                          e.preventDefault();\n                          const formData = new FormData(e.target as HTMLFormElement);\n                          const cardNumber = formData.get(\"cardNumber\") as string;\n                          const last4 = cardNumber.slice(-4);\n                          const brand = cardNumber.startsWith(\"4\") ? \"Visa\" : \n                                       cardNumber.startsWith(\"5\") ? \"Mastercard\" : \"Card\";\n                          \n                          const newMethod = {\n                            id: paymentMethods.length + 1,\n                            type: \"card\",\n                            last4,\n                            brand,\n                            isDefault: paymentMethods.length === 0\n                          };\n                          \n                          setPaymentMethods([...paymentMethods, newMethod]);\n                          toast({\n                            title: \"Payment Method Added\",\n                            description: `${brand} ending in ${last4} has been added successfully.`,\n                          });\n                          \n                          // Reset form\n                          (e.target as HTMLFormElement).reset();\n                          \n                          // Switch back to cards tab\n                          const cardsTab = document.querySelector('[value=\"cards\"]') as HTMLElement;\n                          cardsTab?.click();\n                        }}\n                        className=\"space-y-4\"\n                      >\n                        <div>\n                          <Label htmlFor=\"cardNumber\">Card Number</Label>\n                          <Input\n                            id=\"cardNumber\"\n                            name=\"cardNumber\"\n                            placeholder=\"1234 5678 9012 3456\"\n                            maxLength={19}\n                            onChange={(e) => {\n                              // Auto-format card number\n                              let value = e.target.value.replace(/\\D/g, '');\n                              value = value.replace(/(\\d{4})(?=\\d)/g, '$1 ');\n                              e.target.value = value;\n                            }}\n                            required\n                          />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"expiry\">Expiry Date</Label>\n                            <Input\n                              id=\"expiry\"\n                              name=\"expiry\"\n                              placeholder=\"MM/YY\"\n                              maxLength={5}\n                              onChange={(e) => {\n                                let value = e.target.value.replace(/\\D/g, '');\n                                if (value.length >= 2) {\n                                  value = value.substring(0,2) + '/' + value.substring(2,4);\n                                }\n                                e.target.value = value;\n                              }}\n                              required\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"cvc\">CVC</Label>\n                            <Input\n                              id=\"cvc\"\n                              name=\"cvc\"\n                              placeholder=\"123\"\n                              maxLength={4}\n                              onChange={(e) => {\n                                e.target.value = e.target.value.replace(/\\D/g, '');\n                              }}\n                              required\n                            />\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"cardholderName\">Cardholder Name</Label>\n                          <Input\n                            id=\"cardholderName\"\n                            name=\"cardholderName\"\n                            placeholder=\"John Doe\"\n                            required\n                          />\n                        </div>\n                        \n                        <Button type=\"submit\" className=\"w-full bg-sky-500 hover:bg-sky-600\">\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Payment Method\n                        </Button>\n                      </form>\n                    </TabsContent>\n                  </Tabs>\n                </DialogContent>\n              </Dialog>\n\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <Globe className=\"w-4 h-4 mr-2\" />\n                Language & Region\n              </Button>\n\n              <Button variant=\"outline\" className=\"w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Delete Account\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20591},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Users, \n  ShieldCheck, \n  Settings, \n  AlertTriangle, \n  Car,\n  CreditCard,\n  UserCheck,\n  UserX,\n  CheckCircle,\n  XCircle,\n  Clock\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  phoneVerified: boolean;\n  suspended: boolean;\n  createdAt: string;\n  profileImageUrl?: string;\n}\n\ninterface IdVerification {\n  id: string;\n  userId: string;\n  documentType: string;\n  documentUrl: string;\n  status: string;\n  reviewNotes?: string;\n  createdAt: string;\n  user?: User;\n}\n\ninterface AdminSettings {\n  id: string;\n  adminId: string;\n  paypalEmail: string;\n  paypalClientId: string;\n  paypalClientSecret: string;\n  paypalEnvironment: string;\n  commissionRate: number;\n  createdAt: string;\n}\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedVerification, setSelectedVerification] = useState<IdVerification | null>(null);\n  const [reviewNotes, setReviewNotes] = useState(\"\");\n  \n  // Admin settings form state\n  const [settingsForm, setSettingsForm] = useState({\n    paypalEmail: \"\",\n    paypalClientId: \"\",\n    paypalClientSecret: \"\",\n    paypalEnvironment: \"sandbox\",\n    commissionRate: 10,\n  });\n\n  // Fetch all users\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Fetch pending ID verifications\n  const { data: verifications = [] } = useQuery<IdVerification[]>({\n    queryKey: [\"/api/admin/verifications\"],\n  });\n\n  // Fetch admin settings\n  const { data: adminSettings } = useQuery<AdminSettings>({\n    queryKey: [\"/api/admin/settings\"],\n  });\n\n  // User suspension mutation\n  const suspendUserMutation = useMutation({\n    mutationFn: ({ userId, suspended }: { userId: string; suspended: boolean }) =>\n      apiRequest(\"PUT\", `/api/admin/users/${userId}/suspend`, { suspended }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User Updated\",\n        description: \"User status has been updated successfully\",\n      });\n    },\n  });\n\n  // Verification review mutation\n  const reviewVerificationMutation = useMutation({\n    mutationFn: ({ id, status, notes }: { id: string; status: string; notes: string }) =>\n      apiRequest(\"PUT\", `/api/admin/verifications/${id}`, { \n        status, \n        reviewNotes: notes \n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/verifications\"] });\n      setSelectedVerification(null);\n      setReviewNotes(\"\");\n      toast({\n        title: \"Verification Reviewed\",\n        description: \"ID verification has been processed successfully\",\n      });\n    },\n  });\n\n  // Admin settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: (settings: any) => {\n      if (adminSettings) {\n        return apiRequest(\"PUT\", \"/api/admin/settings\", settings);\n      } else {\n        return apiRequest(\"POST\", \"/api/admin/settings\", settings);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Admin settings have been saved successfully\",\n      });\n    },\n  });\n\n  const handleVerificationReview = (verification: IdVerification) => {\n    setSelectedVerification(verification);\n    setReviewNotes(\"\");\n  };\n\n  const handleSaveSettings = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateSettingsMutation.mutate(settingsForm);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground\">Manage users, verifications, and system settings</p>\n      </div>\n\n      <Tabs defaultValue=\"users\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"users\" className=\"flex items-center space-x-2\">\n            <Users className=\"w-4 h-4\" />\n            <span>Users</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"verifications\" className=\"flex items-center space-x-2\">\n            <ShieldCheck className=\"w-4 h-4\" />\n            <span>ID Verifications</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"flex items-center space-x-2\">\n            <Settings className=\"w-4 h-4\" />\n            <span>Settings</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Users Tab */}\n        <TabsContent value=\"users\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5\" />\n                <span>User Management</span>\n              </CardTitle>\n              <CardDescription>\n                Manage registered users and their account status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {users.map((user) => (\n                  <div\n                    key={user.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar>\n                        <AvatarImage src={user.profileImageUrl} />\n                        <AvatarFallback>\n                          {user.firstName[0]}{user.lastName[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <div className=\"font-medium\">\n                          {user.firstName} {user.lastName}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {user.email}\n                        </div>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant={user.phoneVerified ? \"default\" : \"secondary\"}>\n                            {user.phoneVerified ? \"Phone Verified\" : \"Phone Pending\"}\n                          </Badge>\n                          {user.suspended && (\n                            <Badge variant=\"destructive\">Suspended</Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Joined {format(new Date(user.createdAt), \"MMM d, yyyy\")}\n                      </span>\n                      <Button\n                        onClick={() =>\n                          suspendUserMutation.mutate({\n                            userId: user.id,\n                            suspended: !user.suspended,\n                          })\n                        }\n                        disabled={suspendUserMutation.isPending}\n                        variant={user.suspended ? \"default\" : \"destructive\"}\n                        size=\"sm\"\n                      >\n                        {user.suspended ? (\n                          <>\n                            <UserCheck className=\"w-4 h-4 mr-1\" />\n                            Unsuspend\n                          </>\n                        ) : (\n                          <>\n                            <UserX className=\"w-4 h-4 mr-1\" />\n                            Suspend\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* ID Verifications Tab */}\n        <TabsContent value=\"verifications\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <ShieldCheck className=\"w-5 h-5\" />\n                  <span>Pending Verifications</span>\n                </CardTitle>\n                <CardDescription>\n                  Review and approve user ID verification submissions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {verifications.length === 0 ? (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      No pending verifications\n                    </div>\n                  ) : (\n                    verifications.map((verification) => (\n                      <div\n                        key={verification.id}\n                        className=\"p-4 border rounded-lg space-y-3\"\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">\n                              {verification.user?.firstName} {verification.user?.lastName}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {verification.documentType}\n                            </div>\n                          </div>\n                          <Badge variant=\"secondary\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            Pending\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Submitted {format(new Date(verification.createdAt), \"PPp\")}\n                        </div>\n                        <Button\n                          onClick={() => handleVerificationReview(verification)}\n                          size=\"sm\"\n                          className=\"w-full\"\n                        >\n                          Review Document\n                        </Button>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Verification Review Panel */}\n            {selectedVerification && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Review Verification</CardTitle>\n                  <CardDescription>\n                    {selectedVerification.user?.firstName} {selectedVerification.user?.lastName} - {selectedVerification.documentType}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <img\n                      src={selectedVerification.documentUrl}\n                      alt=\"ID Document\"\n                      className=\"w-full max-w-md mx-auto rounded-lg border\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">\n                      Review Notes\n                    </label>\n                    <Textarea\n                      value={reviewNotes}\n                      onChange={(e) => setReviewNotes(e.target.value)}\n                      placeholder=\"Add any notes about this verification...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={() =>\n                        reviewVerificationMutation.mutate({\n                          id: selectedVerification.id,\n                          status: \"approved\",\n                          notes: reviewNotes,\n                        })\n                      }\n                      disabled={reviewVerificationMutation.isPending}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-1\" />\n                      Approve\n                    </Button>\n                    <Button\n                      onClick={() =>\n                        reviewVerificationMutation.mutate({\n                          id: selectedVerification.id,\n                          status: \"rejected\",\n                          notes: reviewNotes,\n                        })\n                      }\n                      disabled={reviewVerificationMutation.isPending}\n                      variant=\"destructive\"\n                      className=\"flex-1\"\n                    >\n                      <XCircle className=\"w-4 h-4 mr-1\" />\n                      Reject\n                    </Button>\n                  </div>\n                  <Button\n                    onClick={() => setSelectedVerification(null)}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    Cancel\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        {/* Settings Tab */}\n        <TabsContent value=\"settings\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                <span>PayPal Payment Settings</span>\n              </CardTitle>\n              <CardDescription>\n                Configure your PayPal account and commission rates for payment processing\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSaveSettings} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">\n                      PayPal Email Address\n                    </label>\n                    <Input\n                      type=\"email\"\n                      value={settingsForm.paypalEmail}\n                      onChange={(e) =>\n                        setSettingsForm({ ...settingsForm, paypalEmail: e.target.value })\n                      }\n                      placeholder=\"your-email@paypal.com\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      The email address associated with your PayPal account\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">\n                      Commission Rate (%)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"50\"\n                      step=\"0.1\"\n                      value={settingsForm.commissionRate}\n                      onChange={(e) =>\n                        setSettingsForm({ \n                          ...settingsForm, \n                          commissionRate: parseFloat(e.target.value) \n                        })\n                      }\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">\n                      PayPal Client ID\n                    </label>\n                    <Input\n                      value={settingsForm.paypalClientId}\n                      onChange={(e) =>\n                        setSettingsForm({ ...settingsForm, paypalClientId: e.target.value })\n                      }\n                      placeholder=\"Enter PayPal Client ID\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Get this from your PayPal Developer Dashboard\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">\n                      PayPal Client Secret\n                    </label>\n                    <Input\n                      type=\"password\"\n                      value={settingsForm.paypalClientSecret}\n                      onChange={(e) =>\n                        setSettingsForm({ ...settingsForm, paypalClientSecret: e.target.value })\n                      }\n                      placeholder=\"Enter PayPal Client Secret\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Keep this secret - get it from your PayPal Developer Dashboard\n                    </p>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Environment\n                  </label>\n                  <select \n                    value={settingsForm.paypalEnvironment}\n                    onChange={(e) => setSettingsForm({...settingsForm, paypalEnvironment: e.target.value})}\n                    className=\"w-full p-2 border rounded-md dark:bg-gray-800 dark:border-gray-600\"\n                  >\n                    <option value=\"sandbox\">Sandbox (Testing)</option>\n                    <option value=\"production\">Production (Live)</option>\n                  </select>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Use sandbox for testing, production for real payments\n                  </p>\n                </div>\n                <Separator />\n                <Button\n                  type=\"submit\"\n                  disabled={updateSettingsMutation.isPending}\n                  className=\"bg-sky-600 hover:bg-sky-700\"\n                >\n                  {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":18681},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { GPSTracker } from \"@/components/GPSTracker\";\nimport { \n  Send, \n  MessageCircle, \n  AlertTriangle, \n  MapPin, \n  Clock,\n  Car,\n  User,\n  Navigation\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface ChatMessage {\n  id: string;\n  senderId: string;\n  message: string;\n  messageType: 'text' | 'system' | 'emergency';\n  createdAt: string;\n  sender?: {\n    firstName: string;\n    lastName: string;\n    profileImageUrl?: string;\n  };\n}\n\ninterface RideDetails {\n  id: string;\n  origin: string;\n  destination: string;\n  departureDate: string;\n  price: string;\n  status: string;\n  driver: {\n    firstName: string;\n    lastName: string;\n    profileImageUrl?: string;\n  };\n  vehicle: {\n    make: string;\n    model: string;\n    color: string;\n  };\n}\n\nexport default function Chat() {\n  const [match, params] = useRoute('/chat/:rideId');\n  const rideId = (params as any)?.rideId;\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { messages: wsMessages, isConnected, sendChatMessage } = useWebSocket();\n  \n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [activeTab, setActiveTab] = useState(\"chat\");\n\n  // Fetch ride details\n  const { data: ride } = useQuery<RideDetails>({\n    queryKey: [\"/api/rides\", rideId],\n    enabled: !!rideId,\n  });\n\n  // Fetch chat messages\n  const { data: messages = [], refetch } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/chat\", rideId],\n    enabled: !!rideId,\n    refetchInterval: 3000, // Poll every 3 seconds for new messages\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: (message: string) => \n      apiRequest(\"POST\", `/api/chat/${rideId}/messages`, { message }),\n    onSuccess: () => {\n      setNewMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat\", rideId] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Emergency alert mutation\n  const emergencyMutation = useMutation({\n    mutationFn: (alertData: any) => \n      apiRequest(\"POST\", \"/api/emergency/alert\", alertData),\n    onSuccess: () => {\n      toast({\n        title: \"Emergency Alert Sent\",\n        description: \"Emergency services and contacts have been notified\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat\", rideId] });\n    },\n  });\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newMessage.trim() && !sendMessageMutation.isPending) {\n      sendMessageMutation.mutate(newMessage.trim());\n    }\n  };\n\n  const handleEmergencyAlert = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const location = {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          };\n          emergencyMutation.mutate({\n            rideId,\n            alertType: \"emergency\",\n            location: JSON.stringify(location),\n            message: \"Emergency alert triggered from chat\",\n          });\n        },\n        () => {\n          emergencyMutation.mutate({\n            rideId,\n            alertType: \"emergency\",\n            location: \"Location unavailable\",\n            message: \"Emergency alert triggered from chat\",\n          });\n        }\n      );\n    }\n  };\n\n  if (!ride) {\n    return (\n      <div className=\"container mx-auto max-w-4xl p-6\">\n        <div className=\"text-center\">Loading ride details...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-6\">\n      {/* Ride Header */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-2 bg-sky-100 dark:bg-sky-900 rounded-full\">\n                <Car className=\"w-5 h-5 text-sky-600\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-lg\">\n                  {ride.origin} → {ride.destination}\n                </CardTitle>\n                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span>{format(new Date(ride.departureDate), \"PPp\")}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <User className=\"w-4 h-4\" />\n                    <span>{ride.driver.firstName} {ride.driver.lastName}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant={ride.status === 'active' ? 'default' : 'secondary'}>\n                {ride.status}\n              </Badge>\n              <Button\n                onClick={handleEmergencyAlert}\n                disabled={emergencyMutation.isPending}\n                variant=\"destructive\"\n                size=\"sm\"\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                <AlertTriangle className=\"w-4 h-4 mr-1\" />\n                Emergency\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Chat and GPS Tracking Tabs */}\n      <Card className=\"h-[600px] flex flex-col\">\n        <CardHeader className=\"pb-3\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"chat\" className=\"flex items-center gap-2\">\n                <MessageCircle className=\"w-4 h-4\" />\n                Chat\n                {!isConnected && <span className=\"w-2 h-2 bg-red-500 rounded-full\"></span>}\n              </TabsTrigger>\n              <TabsTrigger value=\"gps\" className=\"flex items-center gap-2\">\n                <Navigation className=\"w-4 h-4\" />\n                Live GPS\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"chat\" className=\"mt-4 h-[500px]\">\n              <div className=\"flex flex-col h-full\">\n                {/* Messages Container */}\n                <div className=\"flex-1 overflow-y-auto p-4 space-y-4 border rounded-lg\">\n                  {messages.length === 0 ? (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      No messages yet. Start the conversation!\n                    </div>\n                  ) : (\n                    messages.map((message) => (\n                      <div\n                        key={message.id}\n                        className={`flex ${\n                          message.senderId === (user as any)?.id ? \"justify-end\" : \"justify-start\"\n                        }`}\n                      >\n                        <div\n                          className={`max-w-[70%] ${\n                            message.messageType === 'system'\n                              ? \"mx-auto\"\n                              : message.senderId === (user as any)?.id\n                              ? \"\"\n                              : \"flex items-start space-x-2\"\n                          }`}\n                        >\n                          {message.senderId !== (user as any)?.id && message.messageType !== 'system' && (\n                            <Avatar className=\"w-8 h-8\">\n                              <AvatarImage src={message.sender?.profileImageUrl} />\n                              <AvatarFallback>\n                                {message.sender?.firstName?.[0]}\n                                {message.sender?.lastName?.[0]}\n                              </AvatarFallback>\n                            </Avatar>\n                          )}\n                          \n                          <div\n                            className={`rounded-lg p-3 ${\n                              message.messageType === 'system'\n                                ? \"bg-gray-100 dark:bg-gray-800 text-center text-sm\"\n                                : message.messageType === 'emergency'\n                                ? \"bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200\"\n                                : message.senderId === (user as any)?.id\n                                ? \"bg-sky-600 text-white\"\n                                : \"bg-gray-100 dark:bg-gray-800\"\n                            }`}\n                          >\n                            <div className=\"text-sm\">{message.message}</div>\n                            <div\n                              className={`text-xs mt-1 ${\n                                message.senderId === (user as any)?.id\n                                  ? \"text-sky-100\"\n                                  : \"text-muted-foreground\"\n                              }`}\n                            >\n                              {format(new Date(message.createdAt), \"p\")}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                  <div ref={messagesEndRef} />\n                </div>\n\n                <Separator className=\"my-4\" />\n                \n                {/* Message Input */}\n                <form onSubmit={handleSendMessage} className=\"flex space-x-2\">\n                  <Input\n                    placeholder=\"Type your message...\"\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    className=\"flex-1\"\n                    disabled={sendMessageMutation.isPending}\n                  />\n                  <Button\n                    type=\"submit\"\n                    disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                    className=\"bg-sky-600 hover:bg-sky-700\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </form>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"gps\" className=\"mt-4 h-[500px]\">\n              <div className=\"h-full overflow-y-auto\">\n                <GPSTracker \n                  rideId={rideId!} \n                  isDriver={ride?.driver.firstName === (user as any)?.firstName}\n                  onLocationUpdate={(location) => {\n                    console.log('Location updated:', location);\n                  }}\n                />\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardHeader>\n      </Card>\n    </div>\n  );\n}","size_bytes":11738},"client/src/pages/payment.tsx":{"content":"import { useState } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  CreditCard, \n  Shield, \n  Clock, \n  CheckCircle, \n  AlertCircle,\n  Car,\n  User,\n  MapPin\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport PayPalButton from \"@/components/PayPalButton\";\n\ninterface RideDetails {\n  id: string;\n  origin: string;\n  destination: string;\n  departureDate: string;\n  price: string;\n  status: string;\n  driver: {\n    firstName: string;\n    lastName: string;\n    profileImageUrl?: string;\n  };\n  vehicle: {\n    make: string;\n    model: string;\n    color: string;\n  };\n}\n\ninterface PaymentTransaction {\n  id: string;\n  amount: number;\n  status: string;\n  createdAt: string;\n  rideId: string;\n}\n\nexport default function Payment() {\n  const [match, params] = useRoute('/payment/:rideId');\n  const rideId = (params as any)?.rideId;\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Fetch ride details\n  const { data: ride } = useQuery<RideDetails>({\n    queryKey: [\"/api/rides\", rideId],\n    enabled: !!rideId,\n  });\n\n  // Fetch payment transactions\n  const { data: transactions = [] } = useQuery<PaymentTransaction[]>({\n    queryKey: [\"/api/payment/transactions\"],\n  });\n\n  // Create payment intent mutation\n  const createPaymentMutation = useMutation({\n    mutationFn: (amount: number) => \n      apiRequest(\"POST\", \"/api/payment/create-intent\", { amount, rideId }),\n    onSuccess: (data: any) => {\n      if (data?.success) {\n        toast({\n          title: \"Payment Successful!\",\n          description: `Ride booked successfully! ${data?.creditsUsed || 0} credits used. You have ${data?.remainingCredits || 0} credits remaining.`,\n        });\n        // Redirect to ride details or home\n        window.location.href = \"/\";\n      } else {\n        toast({\n          title: \"Payment Failed\",\n          description: data?.message || \"Insufficient credits for this ride.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Payment Failed\",\n        description: \"Failed to initialize payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePayment = () => {\n    if (!ride) return;\n    \n    setIsProcessing(true);\n    const ridePrice = parseFloat(ride.price);\n    const serviceFee = 2.00;\n    const totalAmount = ridePrice + serviceFee;\n    \n    createPaymentMutation.mutate(totalAmount);\n    \n    // Reset processing state after a delay\n    setTimeout(() => setIsProcessing(false), 3000);\n  };\n\n  if (!ride) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">Loading ride details...</div>\n      </div>\n    );\n  }\n\n  const ridePrice = parseFloat(ride.price);\n  const serviceFee = 2.00;\n  const totalAmount = ridePrice + serviceFee;\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold flex items-center space-x-2\">\n          <CreditCard className=\"w-8 h-8 text-sky-600\" />\n          <span>Ride Payment</span>\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Secure payment processing for your ride booking\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Ride Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Car className=\"w-5 h-5\" />\n              <span>Ride Details</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"w-4 h-4 text-green-600\" />\n                <span className=\"text-sm font-medium\">From:</span>\n                <span className=\"text-sm\">{ride.origin}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"w-4 h-4 text-red-600\" />\n                <span className=\"text-sm font-medium\">To:</span>\n                <span className=\"text-sm\">{ride.destination}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Date:</span>\n                <span className=\"text-sm\">\n                  {format(new Date(ride.departureDate), \"PPp\")}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Driver:</span>\n                <span className=\"text-sm\">\n                  {ride.driver.firstName} {ride.driver.lastName}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Car className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Vehicle:</span>\n                <span className=\"text-sm\">\n                  {ride.vehicle.color} {ride.vehicle.make} {ride.vehicle.model}\n                </span>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Price Breakdown */}\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Price Breakdown</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Ride fare</span>\n                  <span>{Math.ceil(ridePrice)} credits</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Platform fee</span>\n                  <span>{Math.ceil(serviceFee)} credits</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between font-medium text-lg\">\n                  <span>Total</span>\n                  <span>{Math.ceil(totalAmount)} credits</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5\" />\n              <span>Payment Information</span>\n            </CardTitle>\n            <CardDescription>\n              Your payment information is secure and encrypted\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* PayPal Payment Integration */}\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>PayPal Payment:</strong> Secure payment processing with PayPal. \n                The admin receives their percentage automatically, and drivers get paid directly.\n              </AlertDescription>\n            </Alert>\n\n            {/* PayPal Button Container */}\n            <div className=\"p-4 bg-sky-50 dark:bg-sky-950 rounded-lg\">\n              <div className=\"text-center\">\n                <h4 className=\"font-medium mb-2\">Pay with PayPal</h4>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Secure payment with your PayPal account or credit card\n                </p>\n                \n                {/* PayPal Button Component */}\n                <PayPalButton \n                  amount=\"25.00\" \n                  currency=\"USD\" \n                  intent=\"CAPTURE\" \n                />\n              </div>\n            </div>\n\n            {/* Payment Info */}\n            <div className=\"text-sm text-muted-foreground space-y-2\">\n              <p><strong>How payment works:</strong></p>\n              <ul className=\"space-y-1 ml-4\">\n                <li>• Pay securely with PayPal or credit card</li>\n                <li>• Admin receives their percentage automatically</li>\n                <li>• Driver gets paid directly after ride completion</li>\n                <li>• All transactions are secured by PayPal</li>\n              </ul>\n            </div>\n\n            <Button\n              onClick={handlePayment}\n              disabled={isProcessing || createPaymentMutation.isPending}\n              className=\"w-full bg-sky-600 hover:bg-sky-700 h-12 text-lg\"\n            >\n              {isProcessing || createPaymentMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <CreditCard className=\"w-5 h-5 mr-2\" />\n                  Pay {Math.ceil(totalAmount)} Credits\n                </>\n              )}\n            </Button>\n\n            {/* Credit System Notice */}\n            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n              <Shield className=\"w-3 h-3\" />\n              <span>Credit-based system • No real money transactions</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payment History */}\n      {transactions.length > 0 && (\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Clock className=\"w-5 h-5\" />\n              <span>Payment History</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {transactions.map((transaction) => (\n                <div\n                  key={transaction.id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg\"\n                >\n                  <div>\n                    <div className=\"font-medium\">\n                      Ride Payment - ${transaction.amount}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {format(new Date(transaction.createdAt), \"PPp\")}\n                    </div>\n                  </div>\n                  <Badge\n                    variant={\n                      transaction.status === \"completed\" ? \"default\" : \"secondary\"\n                    }\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      {transaction.status === \"completed\" ? (\n                        <CheckCircle className=\"w-3 h-3\" />\n                      ) : (\n                        <Clock className=\"w-3 h-3\" />\n                      )}\n                      <span className=\"capitalize\">{transaction.status}</span>\n                    </div>\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11356},"client/src/components/id-verification.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Upload, Shield, CheckCircle, XCircle, Clock, Loader2 } from \"lucide-react\";\nimport type { IdVerification, User } from \"@shared/schema\";\n\nexport default function IDVerification() {\n  const [documentType, setDocumentType] = useState<string>(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const { user } = useAuth() as { user: User };\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user's ID verifications\n  const { data: verifications = [], isLoading } = useQuery({\n    queryKey: [\"/api/id-verification\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Submit ID verification\n  const submitVerificationMutation = useMutation({\n    mutationFn: async (verificationData: { documentType: string; documentUrl: string }) => {\n      return apiRequest(\"POST\", \"/api/id-verification\", verificationData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"ID Verification Submitted\",\n        description: \"Your ID document has been submitted for review. You'll be notified once it's processed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/id-verification\", user?.id] });\n      setSelectedFile(null);\n      setDocumentType(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit ID verification. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Check file size (max 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File Too Large\",\n          description: \"Please select a file smaller than 5MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Check file type\n      const allowedTypes = [\"image/jpeg\", \"image/jpg\", \"image/png\", \"application/pdf\"];\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select a JPEG, PNG, or PDF file.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setSelectedFile(file);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!documentType || !selectedFile) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a document type and upload a file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      // In a real app, you'd upload to a secure file storage service\n      // For now, we'll simulate the upload\n      const formData = new FormData();\n      formData.append(\"file\", selectedFile);\n      formData.append(\"documentType\", documentType);\n\n      // Simulate file upload\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      const mockDocumentUrl = `https://documents.oneroute.com/${user?.id}/${documentType}_${Date.now()}.${selectedFile.type.split('/')[1]}`;\n\n      await submitVerificationMutation.mutateAsync({\n        documentType,\n        documentUrl: mockDocumentUrl,\n      });\n    } catch (error) {\n      // Error handling is done in the mutation\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case \"rejected\":\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <Badge className=\"bg-green-100 text-green-800\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-100 text-red-800\">Rejected</Badge>;\n      default:\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending Review</Badge>;\n    }\n  };\n\n  const latestVerification = (verifications as IdVerification[])?.[0];\n  const isVerified = latestVerification?.status === \"approved\";\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Current Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Shield className=\"w-5 h-5 mr-2 text-sky-600\" />\n            ID Verification Status\n          </CardTitle>\n          <CardDescription>\n            ID verification helps build trust and ensures safer rides for everyone.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"w-6 h-6 animate-spin\" />\n            </div>\n          ) : (verifications as IdVerification[])?.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600 mb-2\">No ID verification submitted yet</p>\n              <p className=\"text-sm text-gray-500\">Upload your ID to get verified and unlock premium features</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {(verifications as IdVerification[]).map((verification) => (\n                <div key={verification.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getStatusIcon(verification.status || '')}\n                    <div>\n                      <p className=\"font-medium capitalize\">\n                        {verification.documentType.replace(\"_\", \" \")}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        Submitted {verification.createdAt ? new Date(verification.createdAt).toLocaleDateString() : 'Unknown date'}\n                      </p>\n                      {verification.reviewNotes && verification.status === \"rejected\" && (\n                        <p className=\"text-sm text-red-600 mt-1\">{verification.reviewNotes}</p>\n                      )}\n                    </div>\n                  </div>\n                  {getStatusBadge(verification.status || '')}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Upload New Document */}\n      {!isVerified && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload ID Document</CardTitle>\n            <CardDescription>\n              Upload a clear photo of your government-issued ID (passport, driver's license, or national ID).\n              Files must be under 5MB and in JPEG, PNG, or PDF format.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"documentType\">Document Type</Label>\n              <Select value={documentType} onValueChange={setDocumentType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select document type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"license\">Driver's License</SelectItem>\n                  <SelectItem value=\"passport\">Passport</SelectItem>\n                  <SelectItem value=\"national_id\">National ID Card</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"document\">Document File</Label>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                <input\n                  type=\"file\"\n                  id=\"document\"\n                  accept=\"image/jpeg,image/jpg,image/png,application/pdf\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                />\n                <label\n                  htmlFor=\"document\"\n                  className=\"cursor-pointer flex flex-col items-center space-y-2\"\n                >\n                  <Upload className=\"w-8 h-8 text-gray-400\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">\n                      {selectedFile ? selectedFile.name : \"Click to upload document\"}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      JPEG, PNG, or PDF up to 5MB\n                    </p>\n                  </div>\n                </label>\n              </div>\n            </div>\n\n            <Button\n              onClick={handleSubmit}\n              disabled={!documentType || !selectedFile || isUploading || submitVerificationMutation.isPending}\n              className=\"w-full bg-sky-500 hover:bg-sky-600\"\n            >\n              {isUploading || submitVerificationMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Uploading...\n                </>\n              ) : (\n                <>\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Submit for Verification\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Verification Benefits */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Verification Benefits</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-start space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n              <div>\n                <p className=\"font-medium\">Verified Badge</p>\n                <p className=\"text-sm text-gray-600\">Show other users you're trustworthy</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n              <div>\n                <p className=\"font-medium\">Priority Support</p>\n                <p className=\"text-sm text-gray-600\">Get faster response times</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n              <div>\n                <p className=\"font-medium\">Higher Limits</p>\n                <p className=\"text-sm text-gray-600\">Access to premium ride features</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n              <div>\n                <p className=\"font-medium\">Better Matches</p>\n                <p className=\"text-sm text-gray-600\">Preferred in ride matching</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11785},"client/src/components/ride-chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Send, MapPin, Phone } from \"lucide-react\";\nimport type { ChatMessage, User } from \"@shared/schema\";\n\ninterface RideChatProps {\n  rideId: string;\n  participants: User[];\n}\n\ntype ChatMessageWithSender = ChatMessage & {\n  sender: User;\n};\n\nexport default function RideChat({ rideId, participants }: RideChatProps) {\n  const [message, setMessage] = useState(\"\");\n  const { user } = useAuth() as { user: User };\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Fetch chat messages\n  const { data: messages = [], isLoading } = useQuery({\n    queryKey: [\"/api/chat\", rideId],\n    refetchInterval: 3000, // Refresh every 3 seconds for real-time feel\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { message: string; messageType?: string }) => {\n      return apiRequest(\"POST\", `/api/chat/${rideId}/messages`, messageData);\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat\", rideId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Message\",\n        description: error.message || \"Could not send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Share location mutation\n  const shareLocationMutation = useMutation({\n    mutationFn: async () => {\n      return new Promise<{ lat: number; lng: number }>((resolve, reject) => {\n        if (!navigator.geolocation) {\n          reject(new Error(\"Geolocation is not supported\"));\n          return;\n        }\n\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const location = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            };\n            resolve(location);\n          },\n          reject,\n          { enableHighAccuracy: true, timeout: 10000 }\n        );\n      });\n    },\n    onSuccess: async (location) => {\n      await apiRequest(\"POST\", `/api/chat/${rideId}/messages`, {\n        message: `📍 Current Location: https://maps.google.com/?q=${location.lat},${location.lng}`,\n        messageType: \"location\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat\", rideId] });\n      toast({\n        title: \"Location Shared\",\n        description: \"Your current location has been shared with ride participants.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Share Location\",\n        description: error.message || \"Could not share location. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n    sendMessageMutation.mutate({ message: message.trim() });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (date: string) => {\n    return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <Card className=\"h-96 flex flex-col\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg\">Ride Chat</CardTitle>\n        <div className=\"flex -space-x-2\">\n          {participants.map((participant) => (\n            <Avatar key={participant.id} className=\"w-8 h-8 border-2 border-white\">\n              <AvatarImage src={participant.profileImageUrl || \"\"} />\n              <AvatarFallback className=\"text-xs\">\n                {participant.firstName?.[0]}{participant.lastName?.[0]}\n              </AvatarFallback>\n            </Avatar>\n          ))}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        <ScrollArea className=\"flex-1 px-4\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-sky-500 border-t-transparent rounded-full\" />\n            </div>\n          ) : (messages as ChatMessageWithSender[])?.length === 0 ? (\n            <div className=\"flex items-center justify-center h-32 text-gray-500\">\n              Start the conversation!\n            </div>\n          ) : (\n            <div className=\"space-y-3 pb-4\">\n              {(messages as ChatMessageWithSender[]).map((msg) => (\n                <div\n                  key={msg.id}\n                  className={`flex ${msg.senderId === user?.id ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  <div className={`flex items-start space-x-2 max-w-xs ${msg.senderId === user?.id ? \"flex-row-reverse space-x-reverse\" : \"\"}`}>\n                    <Avatar className=\"w-6 h-6\">\n                      <AvatarImage src={msg.sender?.profileImageUrl || \"\"} />\n                      <AvatarFallback className=\"text-xs\">\n                        {msg.sender?.firstName?.[0]}{msg.sender?.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div\n                        className={`rounded-lg px-3 py-2 ${\n                          msg.senderId === user?.id\n                            ? \"bg-sky-500 text-white\"\n                            : \"bg-gray-100 text-gray-900\"\n                        }`}\n                      >\n                        {msg.messageType === \"location\" ? (\n                          <div className=\"flex items-center space-x-1\">\n                            <MapPin className=\"w-4 h-4\" />\n                            <a\n                              href={msg.message.split(\": \")[1]}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"underline\"\n                            >\n                              View Location\n                            </a>\n                          </div>\n                        ) : (\n                          <p className=\"text-sm\">{msg.message}</p>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {msg.createdAt ? formatTime(msg.createdAt.toString()) : ''}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          )}\n        </ScrollArea>\n\n        <div className=\"border-t p-4 space-y-2\">\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"Type a message...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={sendMessageMutation.isPending}\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={!message.trim() || sendMessageMutation.isPending}\n              size=\"sm\"\n              className=\"bg-sky-500 hover:bg-sky-600\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => shareLocationMutation.mutate()}\n              disabled={shareLocationMutation.isPending}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex-1\"\n            >\n              <MapPin className=\"w-4 h-4 mr-1\" />\n              Share Location\n            </Button>\n            <Button\n              onClick={() => toast({ title: \"Calling...\", description: \"Feature coming soon!\" })}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex-1\"\n            >\n              <Phone className=\"w-4 h-4 mr-1\" />\n              Call\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8773},"client/src/pages/messages.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageSquare, Search, Phone, Video, MoreVertical, Send, Paperclip, Smile } from \"lucide-react\";\nimport Navigation from \"@/components/navigation\";\nimport { Link } from \"wouter\";\n\nexport default function Messages() {\n  const [selectedChat, setSelectedChat] = useState<number | null>(1);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const conversations = [\n    {\n      id: 1,\n      name: \"Sarah Johnson\",\n      avatar: \"/avatars/sarah.jpg\",\n      lastMessage: \"Thanks for the ride! See you tomorrow.\",\n      timestamp: \"2 min ago\",\n      unread: 2,\n      online: true,\n      rideInfo: \"Downtown → Airport\"\n    },\n    {\n      id: 2,\n      name: \"Mike Chen\",\n      avatar: \"/avatars/mike.jpg\",\n      lastMessage: \"I'm running 5 minutes late\",\n      timestamp: \"15 min ago\",\n      unread: 1,\n      online: true,\n      rideInfo: \"University → Mall\"\n    },\n    {\n      id: 3,\n      name: \"Emma Davis\",\n      avatar: \"/avatars/emma.jpg\",\n      lastMessage: \"Perfect! I'll be there at 3 PM\",\n      timestamp: \"1 hour ago\",\n      unread: 0,\n      online: false,\n      rideInfo: \"City Center → Beach\"\n    },\n    {\n      id: 4,\n      name: \"Alex Martinez\",\n      avatar: \"/avatars/alex.jpg\",\n      lastMessage: \"Can we meet at the main entrance instead?\",\n      timestamp: \"Yesterday\",\n      unread: 0,\n      online: false,\n      rideInfo: \"Train Station → Hospital\"\n    }\n  ];\n\n  const allMessages = {\n    1: [\n      {\n        id: 1,\n        senderId: 1,\n        text: \"Hi! I'm interested in your ride to the airport tomorrow at 3 PM\",\n        timestamp: \"10:30 AM\",\n        isOwn: false\n      },\n      {\n        id: 2,\n        senderId: \"user\",\n        text: \"Great! I have one spot available. The pickup location is downtown near the coffee shop.\",\n        timestamp: \"10:32 AM\",\n        isOwn: true\n      },\n      {\n        id: 3,\n        senderId: 1,\n        text: \"Perfect! What's the exact address?\",\n        timestamp: \"10:33 AM\",\n        isOwn: false\n      },\n      {\n        id: 4,\n        senderId: \"user\",\n        text: \"123 Main Street, right next to Starbucks. I'll be in a blue Toyota Camry\",\n        timestamp: \"10:35 AM\",\n        isOwn: true\n      },\n      {\n        id: 5,\n        senderId: 1,\n        text: \"Thanks for the ride! See you tomorrow.\",\n        timestamp: \"10:36 AM\",\n        isOwn: false\n      }\n    ],\n    2: [\n      {\n        id: 1,\n        senderId: 2,\n        text: \"Hey! Are we still on for the ride to the mall?\",\n        timestamp: \"2:15 PM\",\n        isOwn: false\n      },\n      {\n        id: 2,\n        senderId: \"user\",\n        text: \"Yes, but I'm running 5 minutes late. Sorry!\",\n        timestamp: \"2:18 PM\",\n        isOwn: true\n      },\n      {\n        id: 3,\n        senderId: 2,\n        text: \"No problem, I'll wait by the main entrance\",\n        timestamp: \"2:19 PM\",\n        isOwn: false\n      }\n    ],\n    3: [\n      {\n        id: 1,\n        senderId: 3,\n        text: \"Hi! I saw your ride posting to the beach\",\n        timestamp: \"Yesterday\",\n        isOwn: false\n      },\n      {\n        id: 2,\n        senderId: \"user\",\n        text: \"Perfect! I'll be there at 3 PM sharp\",\n        timestamp: \"Yesterday\",\n        isOwn: true\n      }\n    ],\n    4: [\n      {\n        id: 1,\n        senderId: 4,\n        text: \"Can we meet at the main entrance instead?\",\n        timestamp: \"Yesterday\",\n        isOwn: false\n      },\n      {\n        id: 2,\n        senderId: \"user\",\n        text: \"Sure, that works better for me too\",\n        timestamp: \"Yesterday\",\n        isOwn: true\n      }\n    ]\n  };\n\n  const messages = selectedChat ? (allMessages[selectedChat as keyof typeof allMessages] || []) : [];\n\n  const selectedConversation = conversations.find(conv => conv.id === selectedChat);\n\n  const filteredConversations = conversations.filter(conv =>\n    conv.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    conv.rideInfo.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleSendMessage = () => {\n    if (newMessage.trim() && selectedChat) {\n      // In a real app, this would send the message to the server\n      console.log(\"Sending message:\", newMessage, \"to conversation:\", selectedChat);\n      setNewMessage(\"\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Messages</h1>\n          <p className=\"text-gray-600 mt-2\">Chat with your ride partners</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6 h-[calc(100vh-200px)]\">\n          {/* Conversations List */}\n          <div className=\"lg:col-span-4\">\n            <Card className=\"h-full flex flex-col\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <MessageSquare className=\"w-5 h-5 text-sky-600\" />\n                    <span>Conversations</span>\n                  </CardTitle>\n                  <Badge variant=\"secondary\" className=\"bg-sky-50 text-sky-700\">\n                    {conversations.filter(c => c.unread > 0).length} unread\n                  </Badge>\n                </div>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search conversations...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </CardHeader>\n              <CardContent className=\"flex-1 p-0\">\n                <ScrollArea className=\"h-full\">\n                  <div className=\"space-y-1 p-4 pt-0\">\n                    {filteredConversations.map((conversation) => (\n                      <Link key={conversation.id} href={`/chat/${conversation.id}`}>\n                        <div className=\"p-3 rounded-lg cursor-pointer transition-colors hover:bg-gray-50\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"relative\">\n                              <Avatar className=\"w-10 h-10\">\n                                <AvatarImage src={conversation.avatar} />\n                                <AvatarFallback className=\"bg-sky-100 text-sky-700\">\n                                  {conversation.name.split(' ').map(n => n[0]).join('')}\n                                </AvatarFallback>\n                              </Avatar>\n                              {conversation.online && (\n                                <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white\"></div>\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center justify-between\">\n                                <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                                  {conversation.name}\n                                </h4>\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-xs text-gray-500\">\n                                    {conversation.timestamp}\n                                  </span>\n                                  {conversation.unread > 0 && (\n                                    <Badge className=\"bg-sky-500 text-white text-xs h-5 w-5 rounded-full p-0 flex items-center justify-center\">\n                                      {conversation.unread}\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                              <p className=\"text-xs text-sky-600 font-medium mt-1\">\n                                {conversation.rideInfo}\n                              </p>\n                              <p className=\"text-sm text-gray-600 truncate mt-1\">\n                                {conversation.lastMessage}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </Link>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Chat Area */}\n          <div className=\"lg:col-span-8\">\n            {selectedConversation ? (\n              <Card className=\"h-full flex flex-col\">\n                {/* Chat Header */}\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"relative\">\n                        <Avatar className=\"w-10 h-10\">\n                          <AvatarImage src={selectedConversation.avatar} />\n                          <AvatarFallback className=\"bg-sky-100 text-sky-700\">\n                            {selectedConversation.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        {selectedConversation.online && (\n                          <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white\"></div>\n                        )}\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">{selectedConversation.name}</h3>\n                        <p className=\"text-sm text-sky-600\">{selectedConversation.rideInfo}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {selectedConversation.online ? 'Online' : 'Last seen 2 hours ago'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-sky-600 hover:text-sky-700\">\n                        <Phone className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-sky-600 hover:text-sky-700\">\n                        <Video className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-sky-600 hover:text-sky-700\">\n                        <MoreVertical className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <Separator />\n\n                {/* Messages */}\n                <CardContent className=\"flex-1 p-0\">\n                  <ScrollArea className=\"h-full\">\n                    <div className=\"p-4 space-y-4\">\n                      {messages.map((message: any) => (\n                        <div\n                          key={message.id}\n                          className={`flex ${message.isOwn ? 'justify-end' : 'justify-start'}`}\n                        >\n                          <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                            message.isOwn\n                              ? 'bg-sky-500 text-white'\n                              : 'bg-gray-100 text-gray-900'\n                          }`}>\n                            <p className=\"text-sm\">{message.text}</p>\n                            <p className={`text-xs mt-1 ${\n                              message.isOwn ? 'text-sky-100' : 'text-gray-500'\n                            }`}>\n                              {message.timestamp}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n\n                <Separator />\n\n                {/* Message Input */}\n                <div className=\"p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                      <Paperclip className=\"w-4 h-4\" />\n                    </Button>\n                    <div className=\"flex-1 relative\">\n                      <Input\n                        placeholder=\"Type a message...\"\n                        value={newMessage}\n                        onChange={(e) => setNewMessage(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                        className=\"pr-10\"\n                      />\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      >\n                        <Smile className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    <Button \n                      onClick={handleSendMessage}\n                      className=\"bg-sky-500 hover:bg-sky-600 text-white\"\n                      disabled={!newMessage.trim()}\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ) : (\n              <Card className=\"h-full flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MessageSquare className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No conversation selected</h3>\n                  <p className=\"text-gray-500\">Choose a conversation from the list to start chatting</p>\n                </div>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14667}}}